<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_PROCESS_MAIN" Id="{7cea8bf1-c942-49b5-be8f-3059d77d0bfb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PROCESS_MAIN IMPLEMENTS I_PROCESS_MAIN
VAR //General
	{attribute 'instance-path'} 
  {attribute 'noinit'} 
	strInstancePath:									                      STRING;
	bInit: 												                          BOOL:=TRUE;
	strFullObjectPath: 								                      STRING;
	stEvent:											                          ST_EVENT;
	bAck:												                            BOOL;
	bNext:                                                  BOOL;
  bStop:                                                  BOOL;
END_VAR
VAR   // From FB_init	
	itfLogEvents: 										                      I_HANDLE_EVENTS;
  itfOpMode:											                        I_OP_MODE;  
  itfTimerNest1:                                          I_CLOCK; 
  itfTimerNest2:                                          I_CLOCK; 
  itfTimerNest3:                                          I_CLOCK; 
  itfTimerNest4:                                          I_CLOCK;
  itfNest1:                                               I_PROCESS_NEST1;
  itfNest2:                                               I_PROCESS_NEST2_4;
  itfNest3:                                               I_PROCESS_NEST2_4;
  itfNest4:                                               I_PROCESS_NEST2_4;
  itfLowPressurePump:                                     I_PUMP_WITH_BYPASS;
  itfOilCooler:                                           I_PUMP;
  itfBypassPump:                                          I_PUMP;
  itfLevelSwitch_AggregateTank1_Out1:                     I_BINARY_SWITCH;
  itfLevelSwitch_AggregateTank1_Out2:                     I_BINARY_SWITCH;
  itfTemperatureSwitch_AggregateTank1_Out1:               I_BINARY_SWITCH;
  itfTemperatureSwitch_AggregateTank1_Out2:               I_BINARY_SWITCH;
  itfLevelSwitch_AggregateTank2_Out1:                     I_BINARY_SWITCH;
  itfLevelSwitch_AggregateTank2_Out2:                     I_BINARY_SWITCH;
  itfLevelSwitch_AggregateTank2_Out3:                     I_BINARY_SWITCH;
  itfSwitch_AggregateFilter_Dirty:                        I_BINARY_SWITCH;  
END_VAR                                      				
VAR	// Step chain control                				
  eSeq, eLastSeq, eNextSeq:					                      E_SEQ_PROCESS; 
                  				
  //eActiveSeqState, eLastActiveSeqState:                 E_SEQ_GENERAL;
	(*
  iInternalSeqStateCase, iLastInternalSeqStateCase:       INT:=0;       
	tonDelay, tonTimeOut, tonStepTime:						          TON;
	tDelay:													                        TIME := T#100MS;
	tTimeOut:												                        TIME := T#100MS;
	tTimeOutExt:											                      TIME := T#100MS;
	bDelayActive, bTimeOutActiveQuit, bTimeOutActiveNoQuit:	BOOL;//Timer Option
	bActiveStep, bDebugAcitve, bDebugNext:					        BOOL;//Debug Option
	i:														                          INT;
 	iError:													                        INT; //ERROR-CODE                    	                   		
	listLastSteps:											                    ARRAY[0..49] OF ST_LAST_STEPS;	
	strExtraInfo:											                      STRING; 
	eStep_Type:												                      E_STEP_STATE_TYPE; 
	bDebugModeActive:										                    BOOL;   
	bWaitForBreakpoint:										                  BOOL;
	bBreakpointActive:										                  BOOL;
	bDebugResume:											                      BOOL;   
	listBreakpoint:											                    ARRAY[0..10] OF  INT;    
*)
i:														                            INT;
stSeqCtrlGeneral:											                    ST_SEQ_CTRL_GEN;  
strSeq:                                                   STRING;   	
uiRequestId:                                              UINT;
END_VAR                                             		
VAR                                                 		
	bMethodeFromExtStarted:									                BOOL;
	bMethodeFromExtActive:									                BOOL;
	bMethodeFromExtDone:									                  BOOL;
	strTemp:												                        STRING;
END_VAR   
VAR
  udiCyclesPerLoop:                                       UDINT := 0;
  udiLoops:                                               UDINT := 0;
  uiCurrentLoop:                                          UINT := 1;
  udiResidualVal:                                         UDINT := 0;
  uiVentCount:                                            UINT;
  iOpStep:                                                INT := 0;
  bRunning:                                               BOOL;
END_VAR 
VAR // Input variables
  stERParams:                                             ST_RECIPE_ENDURANCE_RUN;
  stBPDParams:                                            ST_RECIPE_BREAK_PRESSURE;
  stLT1Params:                                            ST_RECIPE_LEAK_TEST1;
  stLT2Params:                                            ST_RECIPE_LEAK_TEST2;
END_VAR                   	
VAR_TEMP                    	
	iTemp:											                            INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Set FBs and Interfaces ready after switch internal step
IF stSeqCtrlGeneral.iInternalSeqStateCase <> stSeqCtrlGeneral.iLastInternalSeqStateCase AND NOT stSeqCtrlGeneral.bExitSetReadyState THEN
  IF TRUE
  AND itfNest1.M_SetReady()
  AND itfNest2.M_SetReady()
  AND itfNest3.M_SetReady()
  AND itfNest4.M_SetReady()
  AND itfLowPressurePump.M_SetReady()
  AND itfOilCooler.M_SetReady()
  AND itfBypassPump.M_SetReady()
  THEN
    stSeqCtrlGeneral.bExitSetReadyState := TRUE;
  ELSE
    RETURN;
  END_IF
END_IF

stSeqCtrlGeneral.strObject:=F_CreateObjectName(strInstancePath);

// First method call
_m_SequenceManager();
//_m_SaveLastStep();

strSeq := TO_STRING(eSeq);

CASE eSeq OF 
  E_SEQ_VALVE.BASE:;
  
	E_SEQ_PROCESS.INIT: _m_Seq_INIT();
		IF TRUE
		AND (stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE) 
		THEN
      eSeq := eNextSeq := E_SEQ_PROCESS.BASE;
		END_IF
		
	E_SEQ_PROCESS.SETUP:;
  
	// Process
	E_SEQ_PROCESS.ENDURANCE_RUN: _m_Seq_ENDURANCE_RUN();
    IF TRUE
		AND (stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE) 
		THEN
      eSeq := eNextSeq := E_SEQ_PROCESS.BASE;
		END_IF
 
  E_SEQ_PROCESS.BREAK_PRESSURE_DET: _m_Seq_BREAK_PRESSURE_DET();
    IF TRUE
		AND (stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE) 
		THEN
      eSeq := eNextSeq := E_SEQ_PROCESS.BASE;
		END_IF
    
  E_SEQ_PROCESS.LEAK_TEST_1: _m_Seq_LEAK_TEST_1();
    IF TRUE
		AND (stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE) 
		THEN
      eSeq := eNextSeq := E_SEQ_PROCESS.BASE;
		END_IF
    
  E_SEQ_PROCESS.LEAK_TEST_2: _m_Seq_LEAK_TEST_2();
    IF TRUE
		AND (stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE) 
		THEN
      eSeq := eNextSeq := E_SEQ_PROCESS.BASE;
		END_IF
       
  E_SEQ_PROCESS.STOP: _m_Seq_STOP();
    IF TRUE
		AND (stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE) 
		THEN
      eSeq := eNextSeq := E_SEQ_PROCESS.BASE;
		END_IF
    
  E_SEQ_PROCESS.STOP_ENGINE: _m_Seq_STOP_ENGINE();
    IF TRUE
		AND (stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE) 
		THEN
      eSeq := eNextSeq := E_SEQ_PROCESS.BASE;
		END_IF
    
  E_SEQ_PROCESS.ESTOP: _m_Seq_ESTOP();
    IF TRUE
		AND (stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE) 
		THEN
      eSeq := eNextSeq := E_SEQ_PROCESS.BASE;
		END_IF
  
  // End
	E_SEQ_PROCESS.END:;
	E_SEQ_PROCESS.ERROR_SEQ:;	
END_CASE

strTemp:=TO_STRING(eSeq);]]></ST>
    </Implementation>
    <Folder Name="PRIVAT" Id="{5b81d2fd-964a-43ad-80af-f20644ca0ca7}" />
    <Folder Name="SEQUENCE" Id="{7916f48d-8930-4ced-8021-94cad8983fbd}" />
    <Method Name="_m_DebugManager" Id="{cf40ed13-ecb8-488c-9826-2a9fb2bbbe22}" FolderPath="PRIVAT\">
      <Declaration><![CDATA[METHOD PRIVATE _m_DebugManager
VAR_INPUT
	iStepID: int;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TRUE
AND THIS^.stSeqCtrlGeneral.bDebugModeActive 
AND NOT THIS^.stSeqCtrlGeneral.bActiveStep
THEN


THIS^.stSeqCtrlGeneral.bBreakpointActive:=FALSE;

FOR i:=0 TO 10 DO
	
	IF TRUE
	AND iStepID=THIS^.stSeqCtrlGeneral.listBreakpoint[i] 
	AND iStepID<>0
	THEN
		EXIT;
	END_IF
END_FOR
IF (i<=10) THEN
	THIS^.stSeqCtrlGeneral.bBreakpointActive:=TRUE;
END_IF

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Delay" Id="{9fe78e97-b7f1-4694-8030-974e38869d9d}" FolderPath="PRIVAT\">
      <Declaration><![CDATA[METHOD _m_Delay : BOOL
VAR_INPUT
	DelayTime:	TIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stSeqCtrlGeneral.bDelayActive:=TRUE;
THIS^.stSeqCtrlGeneral.tDelay:=DelayTime;
_m_Delay:=FALSE;
IF THIS^.stSeqCtrlGeneral.tonDelay.Q THEN
	_m_Delay:=TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_GeneralStepSetting" Id="{085f52dd-c1bc-4ea3-841f-02b2a510942d}" FolderPath="PRIVAT\">
      <Declaration><![CDATA[METHOD PRIVATE _m_GeneralStepSetting : BOOL
VAR_INPUT
	StepType:			    	E_STEP_STATE_TYPE;
	InfoTextID:					STRING(20);
	EnableDebug:	   			BOOL;	
	
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.stSeqCtrlGeneral.bActiveStep THEN
	THIS^.stSeqCtrlGeneral.eStep_Type:=StepType;
	THIS^.stSeqCtrlGeneral.strExtraInfo:= GenLib.F_RET_TXTLIST_ENTRY(strPortNr:='851',strID:='',strTxtLstName:=InfoTextID);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_SaveLastStep" Id="{cbf8e374-5358-4576-a72b-39ed2c88550a}" FolderPath="PRIVAT\">
      <Declaration><![CDATA[METHOD PRIVATE _m_SaveLastStep : BOOL
VAR_INPUT
END_VAR
VAR
	i: dint;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT THIS^.stSeqCtrlGeneral.bActiveStep THEN
	
	FOR i:=49 TO 1 BY -1 DO
			stSeqCtrlGeneral.listLastSteps[i].strStepName:=stSeqCtrlGeneral.listLastSteps[i-1].strStepName;
			stSeqCtrlGeneral.listLastSteps[i].tStepTime:=stSeqCtrlGeneral.listLastSteps[i-1].tStepTime;
			stSeqCtrlGeneral.listLastSteps[i].tDelayTime:=stSeqCtrlGeneral.listLastSteps[i-1].tDelayTime;
	END_FOR
	stSeqCtrlGeneral.listLastSteps[0].strStepName:=TO_STRING(THIS^.eSeq);
	stSeqCtrlGeneral.listLastSteps[1].tStepTime:=THIS^.stSeqCtrlGeneral.tonStepTime.ET;
	stSeqCtrlGeneral.listLastSteps[1].tStepTime:=THIS^.stSeqCtrlGeneral.tonDelay.ET;
ELSE
	stSeqCtrlGeneral.listLastSteps[0].tStepTime:=THIS^.stSeqCtrlGeneral.tonStepTime.ET;
	stSeqCtrlGeneral.listLastSteps[0].tDelayTime:=THIS^.stSeqCtrlGeneral.tonDelay.ET;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Seq_BREAK_PRESSURE_DET" Id="{803e8cfc-fac8-4871-bef3-a56c59b2dfc2}" FolderPath="SEQUENCE\">
      <Declaration><![CDATA[METHOD PRIVATE _m_Seq_BREAK_PRESSURE_DET : E_SEQ_PROCESS
VAR_INPUT
END_VAR
VAR
	ActiveSeq: STRING;
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//THIS^._m_GeneralStepSetting(StepType:=E_STEP_STATE_TYPE.INIT,
ActiveSeq := TO_STRING(THIS^.eSeq);

CASE THIS^.stSeqCtrlGeneral.eActiveSeqState OF
E_SEQ_GENERAL.READY:;

	
E_SEQ_GENERAL.EXECUTE:;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.RESET;
	END_IF
E_SEQ_GENERAL.RESET:;
	stSeqCtrlGeneral.iInternalSeqStateCase := 0;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.BUSY;
	END_IF
  
E_SEQ_GENERAL.BUSY:;
	CASE THIS^.stSeqCtrlGeneral.iInternalSeqStateCase OF
    0:  // check validity
      IF TRUE
      AND THIS^.stBPDParams.rMinSpeedInMmPerS > 0.1
      AND THIS^.stBPDParams.rEndPosTol > 0
      AND THIS^.stBPDParams.rIncreaseInterval > 0.1
      AND THIS^.stBPDParams.rIncreaseInterval < 10
      AND THIS^.stBPDParams.rNokLimit > 1
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 5; 
      ELSE
        THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR; // Error step
			END_IF
      
    5:  // Start timer
      IF THIS^.itfNest1.P_EnableState THEN
        THIS^.itfTimerNest1.M_StartTimer();
			END_IF
      THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 10;

    10:  // Nest 1 vent cylinder
      IF TRUE
      AND THIS^.itfLowPressurePump.M_Bypass(bEnable:= TRUE)
			AND THIS^.itfNest1.M_VentCylinder(uiVentCount:= THIS^.stBPDParams.uiVentCycles)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 20; 
			END_IF
      
    20:  // Low pressure pump off
      IF TRUE  
      AND THIS^.itfLowPressurePump.M_Off()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 30; 
			END_IF
      
    30:  // Nest 1 determinate stroke length
      IF TRUE 
			AND THIS^.itfNest1.M_MeasureStrokeLength()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 40; 
			END_IF
      
    40:  // Nest 1 endurance run
      IF TRUE 
			AND THIS^.itfNest1.M_BreakPressureDet(stBreakPressureParams:= THIS^.stBPDParams)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 1000; // Exit step
			END_IF
      
    1000: // Exit step
      IF TRUE 
      AND THIS^.itfTimerNest1.M_StopTimer()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 9999; 
			END_IF
      
	ELSE
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.DONE;  
	END_CASE
	THIS^.stSeqCtrlGeneral.strExtraInfo := CONCAT('Internal state: ', TO_STRING(THIS^.stSeqCtrlGeneral.iInternalSeqStateCase));
E_SEQ_GENERAL.DONE:;
E_SEQ_GENERAL.ERROR:;
E_SEQ_GENERAL.TIME_OUT:; 

IF TRUE
AND THIS^.stSeqCtrlGeneral.bTimeOutActiveQuit 
THEN
  THIS^.stSeqCtrlGeneral.strExtraInfo := 'Bitte quittieren und erneut testen';
  IF TRUE
  //AND itfOpMode.P_QUIT
  THEN
    THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
	END_IF
  
END_IF

ELSE
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR;
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Seq_ENDURANCE_RUN" Id="{a51c6301-7ef0-40f1-b6cb-e2d4dba9ea6c}" FolderPath="SEQUENCE\">
      <Declaration><![CDATA[METHOD PRIVATE _m_Seq_ENDURANCE_RUN : E_SEQ_PROCESS
VAR_INPUT
END_VAR
VAR
	ActiveSeq:                      STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//THIS^._m_GeneralStepSetting(StepType:=E_STEP_STATE_TYPE.INIT,
ActiveSeq := TO_STRING(THIS^.eSeq);

CASE THIS^.stSeqCtrlGeneral.eActiveSeqState OF
E_SEQ_GENERAL.READY:;

	
E_SEQ_GENERAL.EXECUTE:;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.RESET;
	END_IF
E_SEQ_GENERAL.RESET:;
	stSeqCtrlGeneral.iInternalSeqStateCase := 0;
	IF TRUE
	THEN
    THIS^.udiCyclesPerLoop := THIS^.stERParams.udiCycles;
    THIS^.udiLoops := 1;
    THIS^.uiCurrentLoop := 1;
    THIS^.udiResidualVal := 0;
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.BUSY;
	END_IF
  
E_SEQ_GENERAL.BUSY:;
	CASE THIS^.stSeqCtrlGeneral.iInternalSeqStateCase OF
    0:  // check validity
      IF TRUE
      AND THIS^.stERParams.rSpeedA > 1
      AND THIS^.stERParams.rSpeedB > 1
      AND THIS^.stERParams.rTurningPointHP > 0
      AND THIS^.stERParams.rTurningPointWP > 0
      AND THIS^.stERParams.rWorkForceA > 0.1
      AND THIS^.stERParams.rWorkForceB > 0.1
      AND THIS^.stERParams.udiCycles > 1
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 5; 
      ELSE
        THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR; // Error step
			END_IF
      
    5:  // Start timer
      IF THIS^.itfNest1.P_EnableState THEN
        THIS^.itfTimerNest1.M_StartTimer();
			END_IF
      IF THIS^.itfNest2.P_EnableState THEN
        THIS^.itfTimerNest2.M_StartTimer();
			END_IF
      IF THIS^.itfNest3.P_EnableState THEN
        THIS^.itfTimerNest3.M_StartTimer();
			END_IF
      IF THIS^.itfNest4.P_EnableState THEN
        THIS^.itfTimerNest4.M_StartTimer();
			END_IF
      THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 10;

    10:  // Nest 1-4 vent cylinder
      IF TRUE
      AND THIS^.itfLowPressurePump.M_Bypass(bEnable:= TRUE)
			AND THIS^.itfNest1.M_VentCylinder(uiVentCount:= THIS^.stERParams.uiVentCycles)
      AND THIS^.itfNest2.M_VentCylinder(uiVentCount:= THIS^.stERParams.uiVentCycles)
      AND THIS^.itfNest3.M_VentCylinder(uiVentCount:= THIS^.stERParams.uiVentCycles)
      AND THIS^.itfNest4.M_VentCylinder(uiVentCount:= THIS^.stERParams.uiVentCycles)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 20; 
			END_IF
      
    20:  // Nest 1-4 determinate stroke length
      IF TRUE  
      AND THIS^.itfLowPressurePump.M_On()
			AND THIS^.itfNest1.M_MeasureStrokeLength()
      AND THIS^.itfNest2.M_MeasureStrokeLength()
      AND THIS^.itfNest3.M_MeasureStrokeLength()
      AND THIS^.itfNest4.M_MeasureStrokeLength()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 30; 
			END_IF
      
    30:  // Nest 1 determinate max speed (VMAX)
      IF TRUE  
			AND THIS^.itfNest1.M_MaxSpeedRecord(stEnduranceRunParams:= THIS^.stERParams)
			THEN 
        IF TRUE
        AND (THIS^.stERParams.rSpeedA > THIS^.itfNest1.P_MaxSpeedInMmPerSWP * THIS^.itfNest1.P_SpeedEfficiencyFactor
        OR THIS^.stERParams.rSpeedB > THIS^.itfNest1.P_MaxSpeedInMmPerSHP * THIS^.itfNest1.P_SpeedEfficiencyFactor) 
        THEN
          THIS^.itfNest2.M_SetEnableState(bEnable:= FALSE);
          THIS^.itfNest3.M_SetEnableState(bEnable:= FALSE);
          THIS^.itfNest4.M_SetEnableState(bEnable:= FALSE);
          THIS^.itfTimerNest2.M_StopTimer();
          THIS^.itfTimerNest3.M_StopTimer();
          THIS^.itfTimerNest4.M_StopTimer();
				END_IF
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 40; 
			END_IF
      
    40:  // Calc loops and cycles
      IF TRUE
      AND THIS^.stERParams.bEnableLeakTest1
      THEN
        THIS^.udiCyclesPerLoop := THIS^.stERParams.udiLT1_Interval;
        THIS^.udiLoops := THIS^.stERParams.udiCycles / THIS^.stERParams.udiLT1_Interval - 1;
        THIS^.udiResidualVal := THIS^.stERParams.udiCycles - THIS^.udiLoops * THIS^.udiCyclesPerLoop;
			END_IF
      THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 50; 
      
    50:  // Nest 1 endurance run
      IF TRUE 
      AND THIS^.itfLowPressurePump.M_Bypass(bEnable:= FALSE)
			AND THIS^.itfNest1.M_EnduranceRun(udiCycles:= THIS^.udiCyclesPerLoop, stEnduranceRunParams:= THIS^.stERParams)
      AND THIS^.itfNest2.M_EnduranceRun(udiCycles:= THIS^.udiCyclesPerLoop, stEnduranceRunParams:= THIS^.stERParams)
      AND THIS^.itfNest3.M_EnduranceRun(udiCycles:= THIS^.udiCyclesPerLoop, stEnduranceRunParams:= THIS^.stERParams)
      AND THIS^.itfNest4.M_EnduranceRun(udiCycles:= THIS^.udiCyclesPerLoop, stEnduranceRunParams:= THIS^.stERParams)
			THEN 
        THIS^.uiCurrentLoop := THIS^.uiCurrentLoop + 1;
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 60; 
			END_IF
      
    60:  // Choice step
      IF TRUE
      AND THIS^.stERParams.bEnableLeakTest1
      THEN
        THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 70; 
      ELSE
        THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 1000; // Exit seq
			END_IF
      
    70:  // Leak test 1
      IF TRUE
      AND THIS^.itfNest1.M_LeakTest1(stLeakTest1Params:= THIS^.stERParams.stLT1_Params)
      AND THIS^.itfNest2.M_LeakTest1(stLeakTest1Params:= THIS^.stERParams.stLT1_Params)
      AND THIS^.itfNest3.M_LeakTest1(stLeakTest1Params:= THIS^.stERParams.stLT1_Params)
      AND THIS^.itfNest4.M_LeakTest1(stLeakTest1Params:= THIS^.stERParams.stLT1_Params)
      THEN
        THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 80;
      END_IF
      
    80:  // Choice step
      IF TRUE
      AND THIS^.uiCurrentLoop <= THIS^.udiLoops
      THEN
        THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 50; // Jump backward
      ELSE
        THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 90;
      END_IF
      
    90:  // Last endurance run loop
      IF TRUE 
      AND THIS^.itfLowPressurePump.M_Bypass(bEnable:= FALSE)
			AND THIS^.itfNest1.M_EnduranceRun(udiCycles:= THIS^.udiCyclesPerLoop + THIS^.udiResidualVal, stEnduranceRunParams:= THIS^.stERParams)
      AND THIS^.itfNest2.M_EnduranceRun(udiCycles:= THIS^.udiCyclesPerLoop + THIS^.udiResidualVal, stEnduranceRunParams:= THIS^.stERParams)
      AND THIS^.itfNest3.M_EnduranceRun(udiCycles:= THIS^.udiCyclesPerLoop + THIS^.udiResidualVal, stEnduranceRunParams:= THIS^.stERParams)
      AND THIS^.itfNest4.M_EnduranceRun(udiCycles:= THIS^.udiCyclesPerLoop + THIS^.udiResidualVal, stEnduranceRunParams:= THIS^.stERParams)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 1000; 
			END_IF
      
    1000:  // Enable low pressure circuit bypass
      IF TRUE 
      AND THIS^.itfLowPressurePump.M_Bypass(bEnable:= TRUE)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 1010; 
			END_IF
      
    1010: // Exit seq
      IF TRUE 
      AND THIS^.itfTimerNest1.M_StopTimer()
      AND THIS^.itfTimerNest2.M_StopTimer()
      AND THIS^.itfTimerNest3.M_StopTimer()
      AND THIS^.itfTimerNest4.M_StopTimer()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 9999; 
			END_IF
      
	ELSE
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.DONE;  
	END_CASE
	THIS^.stSeqCtrlGeneral.strExtraInfo := CONCAT('Internal state: ', TO_STRING(THIS^.stSeqCtrlGeneral.iInternalSeqStateCase));
E_SEQ_GENERAL.DONE:;
E_SEQ_GENERAL.ERROR:;
E_SEQ_GENERAL.TIME_OUT:; 

IF TRUE
AND THIS^.stSeqCtrlGeneral.bTimeOutActiveQuit 
THEN
  THIS^.stSeqCtrlGeneral.strExtraInfo := 'Bitte quittieren und erneut testen';
  IF TRUE
  //AND itfOpMode.P_QUIT
  THEN
    THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
	END_IF
  
END_IF

ELSE
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR;
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Seq_ESTOP" Id="{7cd5e55a-1c92-4d0d-a777-74969a94b9eb}" FolderPath="SEQUENCE\">
      <Declaration><![CDATA[METHOD PRIVATE _m_Seq_ESTOP : E_SEQ_PROCESS
VAR_INPUT
END_VAR
VAR
	ActiveSeq: STRING;
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//THIS^._m_GeneralStepSetting(StepType:=E_STEP_STATE_TYPE.INIT,
ActiveSeq := TO_STRING(THIS^.eSeq);

CASE THIS^.stSeqCtrlGeneral.eActiveSeqState OF
E_SEQ_GENERAL.READY:;

	
E_SEQ_GENERAL.EXECUTE:;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.RESET;
	END_IF
E_SEQ_GENERAL.RESET:;
	stSeqCtrlGeneral.iInternalSeqStateCase := 0;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.BUSY;
	END_IF
  
E_SEQ_GENERAL.BUSY:;
	CASE THIS^.stSeqCtrlGeneral.iInternalSeqStateCase OF
    0:  // Nest 1 stop and enable low pressure pump bypass
      IF TRUE 
			AND THIS^.itfNest1.M_Stop()
      AND THIS^.itfLowPressurePump.M_Bypass(bEnable:= TRUE)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 10; 
			END_IF
      
    10:  // Nest 2-4 stop
      IF TRUE 
			AND THIS^.itfNest2.M_Stop()
			AND THIS^.itfNest3.M_Stop()
			AND THIS^.itfNest4.M_Stop()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 20; 
			END_IF
      
    20:  // Nest 1 stop engine
      IF TRUE 
			AND THIS^.itfNest1.M_StopEngine()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 30; 
			END_IF
      
    30:  // Nest 2-4 stop engine
      IF TRUE 
			AND THIS^.itfNest2.M_StopEngine()
			AND THIS^.itfNest3.M_StopEngine()
			AND THIS^.itfNest4.M_StopEngine()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 1000; 
			END_IF
      
    1000: // Exit step
      IF TRUE
      AND THIS^.itfTimerNest1.M_StopTimer()
      AND THIS^.itfTimerNest2.M_StopTimer()
      AND THIS^.itfTimerNest3.M_StopTimer()
      AND THIS^.itfTimerNest4.M_StopTimer()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 9999; 
			END_IF
      
	ELSE
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.DONE;  
	END_CASE
	THIS^.stSeqCtrlGeneral.strExtraInfo := CONCAT('Internal state: ', TO_STRING(THIS^.stSeqCtrlGeneral.iInternalSeqStateCase));
E_SEQ_GENERAL.DONE:;
E_SEQ_GENERAL.ERROR:;
E_SEQ_GENERAL.TIME_OUT:; 

IF TRUE
AND THIS^.stSeqCtrlGeneral.bTimeOutActiveQuit 
THEN
  THIS^.stSeqCtrlGeneral.strExtraInfo := 'Bitte quittieren und erneut testen';
  IF TRUE
  //AND itfOpMode.P_QUIT
  THEN
    THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
	END_IF
  
END_IF

ELSE
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR;
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Seq_INIT" Id="{22d19214-d003-4baa-8685-e1f60bb1b381}" FolderPath="SEQUENCE\">
      <Declaration><![CDATA[METHOD PRIVATE _m_Seq_INIT : E_SEQ_PROCESS
VAR_INPUT
END_VAR
VAR
	ActiveSeq: STRING;
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//THIS^._m_GeneralStepSetting(StepType:=E_STEP_STATE_TYPE.INIT,
ActiveSeq := TO_STRING(THIS^.eSeq);

CASE THIS^.stSeqCtrlGeneral.eActiveSeqState OF
E_SEQ_GENERAL.READY:;

	
E_SEQ_GENERAL.EXECUTE:;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.RESET;
	END_IF
E_SEQ_GENERAL.RESET:;
	stSeqCtrlGeneral.iInternalSeqStateCase := 0;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.BUSY;
	END_IF
  
E_SEQ_GENERAL.BUSY:;
	CASE THIS^.stSeqCtrlGeneral.iInternalSeqStateCase OF
    0:  // Nest 1 reset
      IF TRUE 
      AND THIS^.itfTimerNest1.M_StartTimer()
			AND THIS^.itfNest1.M_Reset()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 10; 
			END_IF
      
    10: // Nest 2 reset
      IF TRUE 
      AND THIS^.itfTimerNest2.M_StartTimer()
			AND THIS^.itfNest2.M_Reset()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 20; 
			END_IF
      
    20: // Nest 3 reset
      IF TRUE 
      AND THIS^.itfTimerNest3.M_StartTimer()
			AND THIS^.itfNest3.M_Reset()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 30; 
			END_IF
      
    30: // Nest 4 reset
      IF TRUE 
      AND THIS^.itfTimerNest4.M_StartTimer()
			AND THIS^.itfNest4.M_Reset()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 40; 
			END_IF
      
    40: // Low pressure pump reset
      IF TRUE 
			AND THIS^.itfLowPressurePump.M_Off()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 50; 
			END_IF
      
    50: // Low pressure pump reset
      IF TRUE 
			AND THIS^.itfLowPressurePump.M_Bypass(bEnable:= TRUE)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 60; 
			END_IF
      
    60: // Low pressure pump reset
      IF TRUE 
			AND THIS^.itfLowPressurePump.M_On()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 1000; 
			END_IF
      
    1000: // Exit step
      IF TRUE
      AND THIS^.itfTimerNest1.M_StopTimer()
      AND THIS^.itfTimerNest2.M_StopTimer()
      AND THIS^.itfTimerNest3.M_StopTimer()
      AND THIS^.itfTimerNest4.M_StopTimer()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 9999; 
			END_IF
      
	ELSE
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.DONE;  
	END_CASE
	THIS^.stSeqCtrlGeneral.strExtraInfo := CONCAT('Internal state: ', TO_STRING(THIS^.stSeqCtrlGeneral.iInternalSeqStateCase));
E_SEQ_GENERAL.DONE:;
E_SEQ_GENERAL.ERROR:;
E_SEQ_GENERAL.TIME_OUT:; 

IF TRUE
AND THIS^.stSeqCtrlGeneral.bTimeOutActiveQuit 
THEN
  THIS^.stSeqCtrlGeneral.strExtraInfo := 'Bitte quittieren und erneut testen';
  IF TRUE
  //AND itfOpMode.P_QUIT
  THEN
    THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
	END_IF
  
END_IF

ELSE
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR;
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Seq_LEAK_TEST_1" Id="{d8135877-78f7-40cb-9da4-48eea49eacc4}" FolderPath="SEQUENCE\">
      <Declaration><![CDATA[METHOD PRIVATE _m_Seq_LEAK_TEST_1 : E_SEQ_PROCESS
VAR_INPUT
END_VAR
VAR
	ActiveSeq: STRING;
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//THIS^._m_GeneralStepSetting(StepType:=E_STEP_STATE_TYPE.INIT,
ActiveSeq := TO_STRING(THIS^.eSeq);

CASE THIS^.stSeqCtrlGeneral.eActiveSeqState OF
E_SEQ_GENERAL.READY:;

	
E_SEQ_GENERAL.EXECUTE:;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.RESET;
	END_IF
E_SEQ_GENERAL.RESET:;
	stSeqCtrlGeneral.iInternalSeqStateCase := 0;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.BUSY;
	END_IF
  
E_SEQ_GENERAL.BUSY:;
	CASE THIS^.stSeqCtrlGeneral.iInternalSeqStateCase OF
    0:  // check validity
      IF TRUE
      AND THIS^.stLT1Params.rDistanceBeforeEndPosHP > 0
      AND THIS^.stLT1Params.rDistanceBeforeEndPosWP > 0
      AND THIS^.stLT1Params.rLoadForceA > 0.1
      AND THIS^.stLT1Params.rLoadForceA > 0.1
      AND THIS^.stLT1Params.rNokLimit > 0.05
      AND THIS^.stLT1Params.rRestDelay > 0
      AND THIS^.stLT1Params.udiDurationPerTest > 0
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 5; 
      ELSE
        THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR; // Error step
			END_IF
      
    5:  // Start timer
      IF THIS^.itfNest1.P_EnableState THEN
        THIS^.itfTimerNest1.M_StartTimer();
			END_IF
      IF THIS^.itfNest2.P_EnableState THEN
        THIS^.itfTimerNest2.M_StartTimer();
			END_IF
      IF THIS^.itfNest3.P_EnableState THEN
        THIS^.itfTimerNest3.M_StartTimer();
			END_IF
      IF THIS^.itfNest4.P_EnableState THEN
        THIS^.itfTimerNest4.M_StartTimer();
			END_IF
      THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 10;

    10:  // Nest 1 vent cylinder
      IF TRUE
      AND THIS^.itfLowPressurePump.M_Bypass(bEnable:= TRUE)
			AND THIS^.itfNest1.M_VentCylinder(uiVentCount:= THIS^.stLT1Params.uiVentCycles)
      AND THIS^.itfNest2.M_VentCylinder(uiVentCount:= THIS^.stLT1Params.uiVentCycles)
      AND THIS^.itfNest3.M_VentCylinder(uiVentCount:= THIS^.stLT1Params.uiVentCycles)
      AND THIS^.itfNest4.M_VentCylinder(uiVentCount:= THIS^.stLT1Params.uiVentCycles)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 20; 
			END_IF
      
    20:  // Nest 1 determinate stroke length
      IF TRUE  
      AND THIS^.itfLowPressurePump.M_Off()
			AND THIS^.itfNest1.M_MeasureStrokeLength()
      AND THIS^.itfNest2.M_MeasureStrokeLength()
      AND THIS^.itfNest3.M_MeasureStrokeLength()
      AND THIS^.itfNest4.M_MeasureStrokeLength()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 30; 
			END_IF
      
    30:  // Nest 1 endurance run
      IF TRUE 
			AND THIS^.itfNest1.M_LeakTest1(stLeakTest1Params:= THIS^.stLT1Params)
      AND THIS^.itfNest2.M_LeakTest1(stLeakTest1Params:= THIS^.stLT1Params)
      AND THIS^.itfNest3.M_LeakTest1(stLeakTest1Params:= THIS^.stLT1Params)
      AND THIS^.itfNest4.M_LeakTest1(stLeakTest1Params:= THIS^.stLT1Params)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 1000; 
			END_IF
      
    1000: // Exit step
      IF TRUE
      AND THIS^.itfTimerNest1.M_StopTimer()
      AND THIS^.itfTimerNest2.M_StopTimer()
      AND THIS^.itfTimerNest3.M_StopTimer()
      AND THIS^.itfTimerNest4.M_StopTimer()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 9999; 
			END_IF
      
	ELSE
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.DONE;  
	END_CASE
	THIS^.stSeqCtrlGeneral.strExtraInfo := CONCAT('Internal state: ', TO_STRING(THIS^.stSeqCtrlGeneral.iInternalSeqStateCase));
E_SEQ_GENERAL.DONE:;
E_SEQ_GENERAL.ERROR:;
E_SEQ_GENERAL.TIME_OUT:; 

IF TRUE
AND THIS^.stSeqCtrlGeneral.bTimeOutActiveQuit 
THEN
  THIS^.stSeqCtrlGeneral.strExtraInfo := 'Bitte quittieren und erneut testen';
  IF TRUE
  //AND itfOpMode.P_QUIT
  THEN
    THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
	END_IF
  
END_IF

ELSE
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR;
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Seq_LEAK_TEST_2" Id="{28208dc8-5c90-40ca-957a-fece5d6f3bfa}" FolderPath="SEQUENCE\">
      <Declaration><![CDATA[METHOD PRIVATE _m_Seq_LEAK_TEST_2 : E_SEQ_PROCESS
VAR_INPUT
END_VAR
VAR
	ActiveSeq: STRING;
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//THIS^._m_GeneralStepSetting(StepType:=E_STEP_STATE_TYPE.INIT,
ActiveSeq := TO_STRING(THIS^.eSeq);

CASE THIS^.stSeqCtrlGeneral.eActiveSeqState OF
E_SEQ_GENERAL.READY:;

	
E_SEQ_GENERAL.EXECUTE:;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.RESET;
	END_IF
E_SEQ_GENERAL.RESET:;
	stSeqCtrlGeneral.iInternalSeqStateCase := 0;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.BUSY;
	END_IF
  
E_SEQ_GENERAL.BUSY:;
	CASE THIS^.stSeqCtrlGeneral.iInternalSeqStateCase OF
    0:  // check validity
      IF TRUE
      AND THIS^.stLT2Params.rLoadForceA > 0.1
      AND THIS^.stLT2Params.rLoadForceA > 0.1
      AND THIS^.stLT2Params.rNokLimit > 0.05
      AND THIS^.stLT2Params.rRestDelay > 0
      AND THIS^.stLT2Params.udiDurationPerTest > 0
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 5; 
      ELSE
        THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR; // Error step
			END_IF
      
    5:  // Start timer
      IF THIS^.itfNest1.P_EnableState THEN
        THIS^.itfTimerNest1.M_StartTimer();
			END_IF
      THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 10;

    10:  // Nest 1 vent cylinder
      IF TRUE
      AND THIS^.itfLowPressurePump.M_Bypass(bEnable:= TRUE)
			AND THIS^.itfNest1.M_VentCylinder(uiVentCount:= THIS^.stLT2Params.uiVentCycles)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 20; 
			END_IF
      
    20:  // Nest 1 determinate stroke length
      IF TRUE  
      AND THIS^.itfLowPressurePump.M_Off()
			AND THIS^.itfNest1.M_MeasureStrokeLength()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 30; 
			END_IF
      
    30:  // Nest 1 endurance run
      IF TRUE 
			AND THIS^.itfNest1.M_LeakTest2(stLeakTest2Params:= THIS^.stLT2Params)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 1000; 
			END_IF
      
    1000: // Exit step
      IF TRUE
      AND THIS^.itfTimerNest1.M_StopTimer()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 9999; 
			END_IF
      
	ELSE
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.DONE;  
	END_CASE
	THIS^.stSeqCtrlGeneral.strExtraInfo := CONCAT('Internal state: ', TO_STRING(THIS^.stSeqCtrlGeneral.iInternalSeqStateCase));
E_SEQ_GENERAL.DONE:;
E_SEQ_GENERAL.ERROR:;
E_SEQ_GENERAL.TIME_OUT:; 

IF TRUE
AND THIS^.stSeqCtrlGeneral.bTimeOutActiveQuit 
THEN
  THIS^.stSeqCtrlGeneral.strExtraInfo := 'Bitte quittieren und erneut testen';
  IF TRUE
  //AND itfOpMode.P_QUIT
  THEN
    THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
	END_IF
  
END_IF

ELSE
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR;
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Seq_STOP" Id="{1c3b4e49-e1af-4e25-a142-5ab9459cc41c}" FolderPath="SEQUENCE\">
      <Declaration><![CDATA[METHOD PRIVATE _m_Seq_STOP : E_SEQ_PROCESS
VAR_INPUT
END_VAR
VAR
	ActiveSeq: STRING;
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//THIS^._m_GeneralStepSetting(StepType:=E_STEP_STATE_TYPE.INIT,
ActiveSeq := TO_STRING(THIS^.eSeq);

CASE THIS^.stSeqCtrlGeneral.eActiveSeqState OF
E_SEQ_GENERAL.READY:;

	
E_SEQ_GENERAL.EXECUTE:;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.RESET;
	END_IF
E_SEQ_GENERAL.RESET:;
	stSeqCtrlGeneral.iInternalSeqStateCase := 0;
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.BUSY;
	END_IF
  
E_SEQ_GENERAL.BUSY:;
	CASE THIS^.stSeqCtrlGeneral.iInternalSeqStateCase OF
    0:  // Nest 1 stop and low pressure pump bypass
      IF TRUE 
			AND THIS^.itfNest1.M_Stop()
      AND THIS^.itfLowPressurePump.M_Bypass(bEnable:= TRUE)
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 10; 
			END_IF
      
    10:  // Nest 2-4 stop
      IF TRUE 
			AND THIS^.itfNest2.M_Stop()
			AND THIS^.itfNest3.M_Stop()
			AND THIS^.itfNest4.M_Stop()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 1000; 
			END_IF
      
    1000: // Exit step
      IF TRUE
      AND THIS^.itfTimerNest1.M_StopTimer()
      AND THIS^.itfTimerNest2.M_StopTimer()
      AND THIS^.itfTimerNest3.M_StopTimer()
      AND THIS^.itfTimerNest4.M_StopTimer()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 9999; 
			END_IF
      
	ELSE
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.DONE;  
	END_CASE
	THIS^.stSeqCtrlGeneral.strExtraInfo := CONCAT('Internal state: ', TO_STRING(THIS^.stSeqCtrlGeneral.iInternalSeqStateCase));
E_SEQ_GENERAL.DONE:;
E_SEQ_GENERAL.ERROR:;
E_SEQ_GENERAL.TIME_OUT:; 

IF TRUE
AND THIS^.stSeqCtrlGeneral.bTimeOutActiveQuit 
THEN
  THIS^.stSeqCtrlGeneral.strExtraInfo := 'Bitte quittieren und erneut testen';
  IF TRUE
  //AND itfOpMode.P_QUIT
  THEN
    THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
	END_IF
  
END_IF

ELSE
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR;
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_Seq_STOP_ENGINE" Id="{5cc2e1d3-ed47-4639-85ee-c7eab0e56261}" FolderPath="SEQUENCE\">
      <Declaration><![CDATA[METHOD PRIVATE _m_Seq_STOP_ENGINE : E_SEQ_PROCESS
VAR_INPUT
END_VAR
VAR
	ActiveSeq: STRING;
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//THIS^._m_GeneralStepSetting(StepType:=E_STEP_STATE_TYPE.INIT,
ActiveSeq := TO_STRING(THIS^.eSeq);

CASE THIS^.stSeqCtrlGeneral.eActiveSeqState OF
E_SEQ_GENERAL.READY:;

	
E_SEQ_GENERAL.EXECUTE:;
	IF TRUE
	AND _m_Delay(T#1S)
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.RESET;
	END_IF
E_SEQ_GENERAL.RESET:;
	stSeqCtrlGeneral.iInternalSeqStateCase := 0;
  
	IF TRUE
	THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.BUSY;
	END_IF
E_SEQ_GENERAL.BUSY:;
	CASE THIS^.stSeqCtrlGeneral.iInternalSeqStateCase OF
		0:  // Nest 1 engine stop
      IF TRUE 
			AND THIS^.itfNest1.M_StopEngine()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 10; 
			END_IF
      
    10: // Nest 2-4 engine stop
      IF TRUE 
			AND THIS^.itfNest2.M_StopEngine()
			AND THIS^.itfNest3.M_StopEngine()
			AND THIS^.itfNest4.M_StopEngine()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 1000; 
			END_IF
      
    1000: // Exit step
      IF TRUE
      AND THIS^.itfTimerNest1.M_StopTimer()
      AND THIS^.itfTimerNest2.M_StopTimer()
      AND THIS^.itfTimerNest3.M_StopTimer()
      AND THIS^.itfTimerNest4.M_StopTimer()
			THEN 
				THIS^.stSeqCtrlGeneral.iInternalSeqStateCase := 9999; 
			END_IF
      
	ELSE
		THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.DONE;  
	END_CASE
	THIS^.stSeqCtrlGeneral.strExtraInfo := CONCAT('Internal state: ', TO_STRING(THIS^.stSeqCtrlGeneral.iInternalSeqStateCase));
E_SEQ_GENERAL.DONE:;
E_SEQ_GENERAL.ERROR:;
E_SEQ_GENERAL.TIME_OUT:; 

IF TRUE
AND THIS^.stSeqCtrlGeneral.bTimeOutActiveQuit 
THEN
  THIS^.stSeqCtrlGeneral.strExtraInfo := 'Bitte quittieren und erneut testen';
  IF TRUE
  //AND itfOpMode.P_QUIT
  THEN
    THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
	END_IF
  
END_IF

ELSE
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.ERROR;
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_SequenceManager" Id="{e7136404-aa05-42ec-a315-90d24e0aa4b8}" FolderPath="PRIVAT\">
      <Declaration><![CDATA[METHOD PRIVATE _m_SequenceManager
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF FALSE
//AND THIS^.eActiveSeqState=DONE 
AND eLastSeq<>eSeq
THEN
	IF THIS^.stSeqCtrlGeneral.eActiveSeqState<>E_SEQ_GENERAL.EXECUTE THEN
		THIS^.stSeqCtrlGeneral.eActiveSeqState:=E_SEQ_GENERAL.READY;
	END_IF
END_IF

eSeq := eNextSeq;

//DelayTimer und TimeOut Timer verwalten
stSeqCtrlGeneral.bActiveStep:=	TRUE
				AND eLastSeq					=	eSeq
				AND stSeqCtrlGeneral.eLastActiveSeqState			=	stSeqCtrlGeneral.eActiveSeqState
				AND	stSeqCtrlGeneral.iLastInternalSeqStateCase	=	stSeqCtrlGeneral.iInternalSeqStateCase
				;
			
IF NOT stSeqCtrlGeneral.bActiveStep THEN
	stSeqCtrlGeneral.bDelayActive:=FALSE;
	stSeqCtrlGeneral.bTimeOutActiveQuit:=FALSE;
	stSeqCtrlGeneral.bTimeOutActiveNoQuit:=FALSE;
  THIS^.stSeqCtrlGeneral.strExtraInfo:='';
END_IF

_m_SaveLastStep();
stSeqCtrlGeneral.tonDelay	(IN:=stSeqCtrlGeneral.bActiveStep AND stSeqCtrlGeneral.bDelayActive, 		PT:=stSeqCtrlGeneral.tDelay);
stSeqCtrlGeneral.tonTimeOut	(IN:=stSeqCtrlGeneral.bActiveStep AND (stSeqCtrlGeneral.bTimeOutActiveNoQuit OR stSeqCtrlGeneral.bTimeOutActiveQuit), 	PT:=stSeqCtrlGeneral.tTimeOut);
stSeqCtrlGeneral.tonStepTime	(IN:= stSeqCtrlGeneral.bActiveStep, PT:= T#24H);

IF stSeqCtrlGeneral.tonTimeOut.Q  THEN
	stSeqCtrlGeneral.eActiveSeqState:=E_SEQ_GENERAL.TIME_OUT;
END_IF

IF stSeqCtrlGeneral.iError<>0 THEN
	eSeq:=E_SEQ_PROCESS.ERROR_SEQ;
END_IF



eLastSeq					:=	eSeq;
stSeqCtrlGeneral.eLastActiveSeqState			:=	stSeqCtrlGeneral.eActiveSeqState;
stSeqCtrlGeneral.iLastInternalSeqStateCase	:=	stSeqCtrlGeneral.iInternalSeqStateCase;

// Reset set ready state
IF THIS^.stSeqCtrlGeneral.bExitSetReadyState THEN
  THIS^.stSeqCtrlGeneral.bExitSetReadyState := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_m_TimeOut" Id="{954056a7-9b1a-46fe-a1fd-1a17b3e12e91}" FolderPath="PRIVAT\">
      <Declaration><![CDATA[METHOD PRIVATE _m_TimeOut : BOOL
VAR_INPUT
	bTimeoutActiveToQuit:	BOOL;
	bTimeOutActiveNoQuit:	BOOL;
	tTimeOut:				TIME;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stSeqCtrlGeneral.bTimeOutActiveQuit:=	bTimeoutActiveToQuit;
THIS^.stSeqCtrlGeneral.bTimeOutActiveNoQuit:=	bTimeOutActiveNoQuit;
THIS^.stSeqCtrlGeneral.tTimeOut:=			tTimeOut;
_m_TimeOut:=FALSE;
IF THIS^.stSeqCtrlGeneral.tonTimeOut.Q THEN
	_m_TimeOut:=TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{c58c5cdc-e298-464a-b4fb-8ebea23b6eb0}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
  
  itfLogEvents: 										                      I_HANDLE_EVENTS;
  itfOpMode:											                        I_OP_MODE; 
  itfTimerNest1:                                          I_CLOCK; 
  itfTimerNest2:                                          I_CLOCK; 
  itfTimerNest3:                                          I_CLOCK; 
  itfTimerNest4:                                          I_CLOCK;
  itfNest1:                                               I_PROCESS_NEST1;
  itfNest2:                                               I_PROCESS_NEST2_4;
  itfNest3:                                               I_PROCESS_NEST2_4;
  itfNest4:                                               I_PROCESS_NEST2_4;
  itfLowPressurePump:                                     I_PUMP_WITH_BYPASS;
  itfOilCooler:                                           I_PUMP;
  itfBypassPump:                                          I_PUMP;
  itfLevelSwitch_AggregateTank1_Out1:                     I_BINARY_SWITCH;
  itfLevelSwitch_AggregateTank1_Out2:                     I_BINARY_SWITCH;
  itfTemperatureSwitch_AggregateTank1_Out1:               I_BINARY_SWITCH;
  itfTemperatureSwitch_AggregateTank1_Out2:               I_BINARY_SWITCH;
  itfLevelSwitch_AggregateTank2_Out1:                     I_BINARY_SWITCH;
  itfLevelSwitch_AggregateTank2_Out2:                     I_BINARY_SWITCH;
  itfLevelSwitch_AggregateTank2_Out3:                     I_BINARY_SWITCH;
  itfSwitch_AggregateFilter_Dirty:                        I_BINARY_SWITCH; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.itfLogEvents := itfLogEvents;
THIS^.itfOpMode := itfOpMode;
THIS^.itfTimerNest1 := itfTimerNest1;
THIS^.itfTimerNest2 := itfTimerNest2;
THIS^.itfTimerNest3 := itfTimerNest3;
THIS^.itfTimerNest4 := itfTimerNest4;
THIS^.itfNest1 := itfNest1;
THIS^.itfNest2 := itfNest2;
THIS^.itfNest3 := itfNest3;
THIS^.itfNest4 := itfNest4;
THIS^.itfLowPressurePump := itfLowPressurePump;
THIS^.itfOilCooler := itfOilCooler;
THIS^.itfBypassPump := itfBypassPump;
THIS^.itfLevelSwitch_AggregateTank1_Out1 := itfLevelSwitch_AggregateTank1_Out1;
THIS^.itfLevelSwitch_AggregateTank1_Out2 := itfLevelSwitch_AggregateTank1_Out2;
THIS^.itfTemperatureSwitch_AggregateTank1_Out1 := itfTemperatureSwitch_AggregateTank1_Out1;
THIS^.itfTemperatureSwitch_AggregateTank1_Out2 := itfTemperatureSwitch_AggregateTank1_Out2;
THIS^.itfLevelSwitch_AggregateTank2_Out1 := itfLevelSwitch_AggregateTank2_Out1;
THIS^.itfLevelSwitch_AggregateTank2_Out2 := itfLevelSwitch_AggregateTank2_Out2;
THIS^.itfLevelSwitch_AggregateTank2_Out3 := itfLevelSwitch_AggregateTank2_Out3;
THIS^.itfSwitch_AggregateFilter_Dirty := itfSwitch_AggregateFilter_Dirty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_BreakPressureDet" Id="{3a19c7cb-e4cb-4e98-a0d4-824726720bdb}">
      <Declaration><![CDATA[METHOD M_BreakPressureDet : BOOL
VAR_INPUT
  stBreakPressureParams:                 ST_RECIPE_BREAK_PRESSURE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_BreakPressureDet := THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE;

// Assign input
THIS^.stBPDParams := stBreakPressureParams;

// General
IF THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.READY THEN
  THIS^.eNextSeq := E_SEQ_PROCESS.BREAK_PRESSURE_DET;
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_EnduranceRun" Id="{4f2c985e-a721-4788-8160-b7bd44014e33}">
      <Declaration><![CDATA[METHOD M_EnduranceRun : BOOL
VAR_INPUT
  stEnduranceRunParams:                 ST_RECIPE_ENDURANCE_RUN;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_EnduranceRun := THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE;

// Assign input
THIS^.stERParams := stEnduranceRunParams;

// General
IF THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.READY THEN
  THIS^.eNextSeq := E_SEQ_PROCESS.ENDURANCE_RUN;
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_EStop" Id="{a9af6422-b5f6-41c3-b941-cba0672c80e1}">
      <Declaration><![CDATA[METHOD M_EStop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_EStop := THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE;

IF THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.READY THEN
  THIS^.eNextSeq := E_SEQ_PROCESS.ESTOP;
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_LeakTest1" Id="{2d6e9442-3e13-407a-ad19-039c1458a116}">
      <Declaration><![CDATA[METHOD M_LeakTest1 : BOOL
VAR_INPUT
  stLeakTest1Params:                 ST_RECIPE_LEAK_TEST1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_LeakTest1 := THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE;

// Assign input
THIS^.stLT1Params := stLeakTest1Params;

// General
IF THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.READY THEN
  THIS^.eNextSeq := E_SEQ_PROCESS.LEAK_TEST_1;
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_LeakTest2" Id="{74e78652-5781-41e2-97f7-bd6978a0aa80}">
      <Declaration><![CDATA[METHOD M_LeakTest2 : BOOL
VAR_INPUT
  stLeakTest2Params:                 ST_RECIPE_LEAK_TEST2;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_LeakTest2 := THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE;

// Assign input
THIS^.stLT2Params := stLeakTest2Params;

// General
IF THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.READY THEN
  THIS^.eNextSeq := E_SEQ_PROCESS.LEAK_TEST_2;
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{b1d69d5b-a763-4801-8d63-7c4d526c8d90}">
      <Declaration><![CDATA[METHOD M_Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Reset := THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE;

IF THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.READY THEN
  THIS^.eNextSeq := E_SEQ_PROCESS.INIT;
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Run" Id="{e244540b-5d3f-4fbd-9700-2e295c4229e0}">
      <Declaration><![CDATA[{warning 'Methodenimplementierung hinzufügen'}
(*=== Method: M_Run  ============================================

 @brief: Here is the global code (Timer, Event, Flange,...)*)
METHOD M_Run
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetReady" Id="{deeebce7-d5bd-4f24-8c16-95acf333c335}">
      <Declaration><![CDATA[METHOD M_SetReady : BOOL
VAR_INPUT
  
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_SetReady := stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.READY;

THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.READY;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stop" Id="{1ec4bc67-66b8-4650-a6c2-95be9de96754}">
      <Declaration><![CDATA[METHOD M_Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Stop := THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE;

IF THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.READY THEN
  THIS^.eNextSeq := E_SEQ_PROCESS.STOP;
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopEngine" Id="{a35c34b5-fdcc-401f-b531-82b6bdf8cb6b}">
      <Declaration><![CDATA[METHOD M_StopEngine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StopEngine := THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.DONE;

IF THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.READY THEN
  THIS^.eNextSeq := E_SEQ_PROCESS.STOP_ENGINE;
  THIS^.stSeqCtrlGeneral.eActiveSeqState := E_SEQ_GENERAL.EXECUTE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Event" Id="{6bf2a264-2653-4937-8a4a-e49e7c3b4fef}">
      <Declaration><![CDATA[{warning 'Eigenschaftenimplementierung hinzufügen'}
(*=== Property: P_Event  ============================================

 @param [set]: 	Set the Structure "ST_EVENT" from another Object
 @param [get]: 	Return the Structure "ST_EVENT", it contains the actual 
					event of the Object *)
PROPERTY P_Event : GenLib.ST_EVENT
]]></Declaration>
      <Get Name="Get" Id="{9782cbbc-68ac-44e1-bb61-6227f0289d5f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c310aa41-0c71-48c4-9523-cece13f113d0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_FullObjectPath" Id="{fa827b5c-2969-4ff3-9db8-9a32eb21cf85}">
      <Declaration><![CDATA[{warning 'Eigenschaftenimplementierung hinzufügen'}
(*=== Property: P_FullObjectPath  ============================================

 @param [set]: 	Set the Object Path (Clear String of Object)
 @param [get]: 	Return the Objectpath *)
PROPERTY P_FullObjectPath : STRING
]]></Declaration>
      <Get Name="Get" Id="{8b3b202f-c8de-46c2-802d-7bda7bad1cf1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ed15d441-87ea-4579-8b8c-c77e9fe0d759}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_Global_Ack" Id="{b2d501da-d1c6-4ae5-a5de-bddde3f29458}">
      <Declaration><![CDATA[{warning 'Eigenschaftenimplementierung hinzufügen'}
(*=== Property: P_Global_Ack  ============================================

 @param [set]: 	Set the Bit for Ack from another Object
 @param [get]: 	Return the state of Ack Bit*)
PROPERTY P_Global_Ack : BOOL
]]></Declaration>
      <Get Name="Get" Id="{ff082c76-7e0a-4698-af2d-cb3d887f45d5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{71248a13-403d-44ca-bfcd-079961348436}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_GlobalID" Id="{998d72c3-2a3f-453c-beef-42fe3234a473}">
      <Declaration><![CDATA[{warning 'Eigenschaftenimplementierung hinzufügen'}
(*=== Property: P_GlobalID  ============================================

 @param [set]: 	-
 @param [get]: 	Return the string of instance path*)
PROPERTY P_GlobalID : STRING
]]></Declaration>
      <Get Name="Get" Id="{83200a4d-999f-40e1-a2fa-d827af50c480}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_ReadyState" Id="{a5a914d2-6d93-4ec4-9867-3bbf7d8f3310}">
      <Declaration><![CDATA[{warning 'Eigenschaftenimplementierung hinzufügen'}
PROPERTY P_ReadyState : BOOL
]]></Declaration>
      <Get Name="Get" Id="{ade13aa0-502f-44c6-8ec7-aea56933f6cc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_ReadyState := THIS^.stSeqCtrlGeneral.eActiveSeqState = E_SEQ_GENERAL.READY;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_PROCESS_MAIN">
      <LineId Id="1065" Count="0" />
      <LineId Id="1067" Count="0" />
      <LineId Id="1072" Count="0" />
      <LineId Id="1091" Count="0" />
      <LineId Id="1073" Count="4" />
      <LineId Id="1070" Count="0" />
      <LineId Id="1086" Count="1" />
      <LineId Id="1089" Count="0" />
      <LineId Id="1092" Count="0" />
      <LineId Id="1088" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="1233" Count="0" />
      <LineId Id="211" Count="4" />
      <LineId Id="1498" Count="0" />
      <LineId Id="1497" Count="0" />
      <LineId Id="1317" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="670" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="218" Count="2" />
      <LineId Id="359" Count="0" />
      <LineId Id="674" Count="0" />
      <LineId Id="230" Count="5" />
      <LineId Id="754" Count="3" />
      <LineId Id="1094" Count="0" />
      <LineId Id="1405" Count="0" />
      <LineId Id="1096" Count="4" />
      <LineId Id="1095" Count="0" />
      <LineId Id="1103" Count="0" />
      <LineId Id="1106" Count="4" />
      <LineId Id="1105" Count="0" />
      <LineId Id="1113" Count="0" />
      <LineId Id="1115" Count="4" />
      <LineId Id="1114" Count="0" />
      <LineId Id="1104" Count="0" />
      <LineId Id="834" Count="4" />
      <LineId Id="833" Count="0" />
      <LineId Id="1406" Count="0" />
      <LineId Id="1408" Count="4" />
      <LineId Id="1407" Count="0" />
      <LineId Id="1391" Count="0" />
      <LineId Id="1393" Count="4" />
      <LineId Id="1392" Count="0" />
      <LineId Id="258" Count="5" />
      <LineId Id="204" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_DebugManager">
      <LineId Id="5" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="14" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_Delay">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="1" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_GeneralStepSetting">
      <LineId Id="37" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="41" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_SaveLastStep">
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_Seq_BREAK_PRESSURE_DET">
      <LineId Id="45" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="333" Count="4" />
      <LineId Id="324" Count="1" />
      <LineId Id="339" Count="1" />
      <LineId Id="320" Count="0" />
      <LineId Id="355" Count="1" />
      <LineId Id="358" Count="1" />
      <LineId Id="357" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="153" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="268" Count="0" />
      <LineId Id="204" Count="1" />
      <LineId Id="221" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="304" Count="1" />
      <LineId Id="307" Count="2" />
      <LineId Id="303" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="343" Count="0" />
      <LineId Id="326" Count="1" />
      <LineId Id="329" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="331" Count="1" />
      <LineId Id="328" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="119" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="123" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_Seq_ENDURANCE_RUN">
      <LineId Id="45" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="346" Count="2" />
      <LineId Id="345" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="421" Count="1" />
      <LineId Id="427" Count="0" />
      <LineId Id="432" Count="2" />
      <LineId Id="436" Count="1" />
      <LineId Id="440" Count="0" />
      <LineId Id="428" Count="3" />
      <LineId Id="148" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="471" Count="3" />
      <LineId Id="476" Count="1" />
      <LineId Id="475" Count="0" />
      <LineId Id="479" Count="1" />
      <LineId Id="478" Count="0" />
      <LineId Id="482" Count="1" />
      <LineId Id="481" Count="0" />
      <LineId Id="462" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="419" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="245" Count="2" />
      <LineId Id="153" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="268" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="251" Count="2" />
      <LineId Id="204" Count="1" />
      <LineId Id="221" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="304" Count="1" />
      <LineId Id="310" Count="1" />
      <LineId Id="447" Count="3" />
      <LineId Id="453" Count="2" />
      <LineId Id="489" Count="2" />
      <LineId Id="446" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="330" Count="2" />
      <LineId Id="336" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="270" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="257" Count="2" />
      <LineId Id="211" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="387" Count="3" />
      <LineId Id="393" Count="0" />
      <LineId Id="395" Count="1" />
      <LineId Id="394" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="399" Count="7" />
      <LineId Id="398" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="367" Count="6" />
      <LineId Id="380" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="409" Count="7" />
      <LineId Id="418" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="284" Count="1" />
      <LineId Id="290" Count="2" />
      <LineId Id="283" Count="0" />
      <LineId Id="358" Count="1" />
      <LineId Id="361" Count="0" />
      <LineId Id="486" Count="2" />
      <LineId Id="485" Count="0" />
      <LineId Id="363" Count="1" />
      <LineId Id="360" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="119" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="123" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_Seq_ESTOP">
      <LineId Id="45" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="153" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="257" Count="1" />
      <LineId Id="260" Count="2" />
      <LineId Id="264" Count="1" />
      <LineId Id="256" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="246" Count="1" />
      <LineId Id="251" Count="0" />
      <LineId Id="253" Count="1" />
      <LineId Id="245" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="268" Count="1" />
      <LineId Id="271" Count="2" />
      <LineId Id="275" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="291" Count="3" />
      <LineId Id="288" Count="2" />
      <LineId Id="286" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="119" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="123" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_Seq_INIT">
      <LineId Id="45" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="152" Count="2" />
      <LineId Id="243" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="159" Count="2" />
      <LineId Id="156" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="247" Count="0" />
      <LineId Id="166" Count="2" />
      <LineId Id="163" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="248" Count="0" />
      <LineId Id="173" Count="2" />
      <LineId Id="170" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="201" Count="4" />
      <LineId Id="207" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="215" Count="4" />
      <LineId Id="214" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="229" Count="4" />
      <LineId Id="228" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="255" Count="3" />
      <LineId Id="252" Count="2" />
      <LineId Id="250" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="119" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="123" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_Seq_LEAK_TEST_1">
      <LineId Id="45" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="304" Count="12" />
      <LineId Id="148" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="337" Count="12" />
      <LineId Id="336" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="245" Count="2" />
      <LineId Id="153" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="268" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="251" Count="2" />
      <LineId Id="204" Count="1" />
      <LineId Id="221" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="208" Count="2" />
      <LineId Id="257" Count="2" />
      <LineId Id="211" Count="1" />
      <LineId Id="283" Count="0" />
      <LineId Id="317" Count="1" />
      <LineId Id="350" Count="3" />
      <LineId Id="324" Count="2" />
      <LineId Id="319" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="119" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="123" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_Seq_LEAK_TEST_2">
      <LineId Id="45" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="307" Count="9" />
      <LineId Id="148" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="333" Count="2" />
      <LineId Id="345" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="153" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="268" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="204" Count="1" />
      <LineId Id="221" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="283" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="320" Count="2" />
      <LineId Id="318" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="119" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="123" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_Seq_STOP">
      <LineId Id="45" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="153" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="238" Count="1" />
      <LineId Id="241" Count="2" />
      <LineId Id="245" Count="1" />
      <LineId Id="237" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="261" Count="3" />
      <LineId Id="258" Count="2" />
      <LineId Id="256" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="119" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="123" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_Seq_STOP_ENGINE">
      <LineId Id="145" Count="15" />
      <LineId Id="164" Count="5" />
      <LineId Id="289" Count="8" />
      <LineId Id="323" Count="2" />
      <LineId Id="299" Count="1" />
      <LineId Id="200" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="340" Count="3" />
      <LineId Id="337" Count="2" />
      <LineId Id="335" Count="0" />
      <LineId Id="201" Count="24" />
      <LineId Id="127" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_SequenceManager">
      <LineId Id="14" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="69" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="23" Count="11" />
      <LineId Id="59" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="79" Count="3" />
      <LineId Id="78" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN._m_TimeOut">
      <LineId Id="8" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.FB_init">
      <LineId Id="7" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="85" Count="3" />
      <LineId Id="19" Count="5" />
      <LineId Id="57" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="49" Count="6" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.M_BreakPressureDet">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="3" />
      <LineId Id="6" Count="3" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.M_EnduranceRun">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="6" Count="3" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.M_EStop">
      <LineId Id="5" Count="4" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.M_LeakTest1">
      <LineId Id="7" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="2" />
      <LineId Id="8" Count="0" />
      <LineId Id="44" Count="2" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.M_LeakTest2">
      <LineId Id="7" Count="0" />
      <LineId Id="50" Count="3" />
      <LineId Id="8" Count="0" />
      <LineId Id="44" Count="2" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.M_Reset">
      <LineId Id="5" Count="1" />
      <LineId Id="42" Count="2" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.M_Run">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.M_SetReady">
      <LineId Id="21" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.M_Stop">
      <LineId Id="5" Count="4" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.M_StopEngine">
      <LineId Id="5" Count="1" />
      <LineId Id="42" Count="2" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.P_Event.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.P_Event.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.P_FullObjectPath.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.P_FullObjectPath.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.P_Global_Ack.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.P_Global_Ack.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.P_GlobalID.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PROCESS_MAIN.P_ReadyState.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>