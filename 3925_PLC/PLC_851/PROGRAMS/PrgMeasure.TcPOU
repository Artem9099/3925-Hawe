<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PrgMeasure" Id="{863d4cd8-1269-4ff0-9112-1a4520e9c307}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PrgMeasure
VAR_INPUT
  bRecord:                                                    BOOL;
END_VAR
VAR
  uiSeq:                                                      UINT := 0;
  i:                                                          UINT;
END_VAR
VAR // Time
  fbLocalSystemTime:                                          FB_LocalSystemTime := ( bEnable := TRUE, dwCycle := 1 );
  systemTime:                                                 TIMESTRUCT;
  sCurrentDateTime:                                           STRING;
END_VAR
VAR // TwincatADSGateway parameter
  bLifeBit:                                                   BOOL;
  bAdsConnected:                                              BOOL;
  bReady:                                                     BOOL;
  bBusy:                                                      BOOL;
  bResult:                                                    BOOL;
  bOpenKeyboard:                                              BOOL;
  bCloseHMI:                                                  BOOL;
  bShutdownPc:                                                BOOL;
  bRestartPc:                                                 BOOL;
  sLog:                                                       T_MaxString;
  stFieldValues:                                              ST_DATABASE_RECORD;
  arrFieldStructContent:                                      ARRAY [0..99] OF T_MaxString;
  arrFieldNames:                                              ARRAY [0..99] OF T_MaxString;
  liFreeSpaceOnC:                                             LINT;
  fbInfluxDB:                                                 FB_INFLUX_DB_ADS(itfOpMode:= PrgOrg.fbOpMode,
                                                                               itfEventLogger:= PrgOrg.fbEventLogger);
END_VAR
VAR // Params from DB Settings
  sMeasurementNameFromCfg:                                    T_MaxString;
  sTagNameFromCfg:                                            T_MaxString;
  uiTagNameIDFromCfg:                                         UINT;
  bCheckMesurementExistSelected:                              BOOL;
  bCheckTagExistSelected:                                     BOOL;
  dtFromFromCfg:                                              DT := DT#2024-01-01-00:00:00;
  dtToFromCfg:                                                DT := DT#2024-01-01-00:00:00;
  bDeleteAllTagContentChecked:                                BOOL;
  sTest:                                                      STRING;
END_VAR
VAR // Get total measurements
  uiTotalMeasurementsSeq:                                     UINT := 0;
  uiTotalMeasurements:                                        UINT;
  bGetTotalMeasurements:                                      BOOL;
  bGetTotalMeasurementsProcessSuccess:                        BOOL;
END_VAR
VAR // Measurement exist
  uiMeasurementExistSeq:                                      UINT := 0;
  bGetMeasurementExist:                                       BOOL;
  bMeasurementExist:                                          BOOL;
END_VAR
VAR // Tag exist
  uiTagExistSeq:                                              UINT := 0;
  bGetTagExist:                                               BOOL;
  bTagExist:                                                  BOOL;
END_VAR
VAR // Delete measurement
  uiDeleteMeasurementSeq:                                     UINT := 0;
  bDeleteMeasurement:                                         BOOL;
  bDeleteMeasurementResult:                                   BOOL;
END_VAR
VAR // Delete Tag
  uiDeleteTagSeq:                                             UINT := 0;
  bDeleteTag:                                                 BOOL;
  bDeleteTagResult:                                           BOOL;
END_VAR
VAR // Delete Tag content block
  uiDeleteTagContentBlockSeq:                                 UINT := 0;
  bDeleteTagContentBlock:                                     BOOL;
  bDeleteTagContentBlockResult:                               BOOL;
END_VAR
VAR // Timer
  iSaveSeq:                                                   INT := 0;
  iSeqCounter:                                                INT := 1;
  bSaveTrigger:                                               BOOL;
  bSaveBusy:                                                  BOOL;
  tInterval:                                                  TIME := T#500MS;
  tonInterval:                                                TON;
  tSwitchTime:                                                TIME := T#10H;
  tonSwitchTimer:                                             TON;
  tFailedSaveLimitTime:                                       TIME := T#7M;
  tonFailedSavelimitTimer:                                    TON;
  uiAllowedSaveFail:                                          UINT := 3;
END_VAR
VAR // Params
  sBucketName:                                                T_MaxString := '3925-HZP';
  sMeasurementName:                                           T_MaxString := 'Artikel';
  sTagName:                                                   T_MaxString := 'Dauerlauf777';
  bSaveSuccess:                                               BOOL;
  uiFailedSaveCounter:                                        UINT := 0;
  
  liTargetCycles:                                             LINT;
  rTargetTestPressureInBarA:                                  REAL;
  rTargetTestPressureInBarB:                                  REAL;
  rTargetTestForceInKNA:                                      REAL;
  rTargetTestForceInKNB:                                      REAL;
  rTargetCounterPressureInBarA:                               REAL;
  rTargetCounterPressureInBarB:                               REAL;
  rTargetCounterForceInKNA:                                   REAL;
  rTargetCounterForceInKNB:                                   REAL;
  rTargetSpeedAInMmPerS:                                      REAL;
  rTargetSpeedBInMmPerS:                                      REAL;
  lrNokLimit:                                                 LREAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Actions *)
A_000_FBs();
A_010_DBInit();
A_100_SaveToDB();
A_110_TotalMeasurements();
A_120_MeasurementExistCheck();
A_130_TagExistCheck();
A_140_DeleteMeasurement();
A_150_DeleteTag();
A_160_DeleteTagContentBlock();

sTest := TO_STRING(dtFromFromCfg);]]></ST>
    </Implementation>
    <Folder Name="InfluxDB" Id="{9633ff19-e69a-47c9-a183-0fb264e8147a}" />
    <Action Name="A_000_FBs" Id="{721e6916-77a9-420d-b6cd-a2099159602d}">
      <Implementation>
        <ST><![CDATA[(* FBs *)
fbLocalSystemTime(systemTime=> systemTime);
fbInfluxDB(bResult:= bResult,
           bADSLifeBit:= bLifeBit,
           bAdsConnected:= bAdsConnected,
           bReady:= bReady,
           bBusy:= bBusy);]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_010_DBInit" Id="{6bf0f23b-ec9b-4edc-a183-4c73385e1f55}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[(* Define struct content names *)
// assign variable names to struct content list
arrFieldStructContent[0] := 'sTimeStamp';
arrFieldStructContent[1] := 'sTimer';
arrFieldStructContent[2] := 'liTargetCycles';
arrFieldStructContent[3] := 'liActiveCycle';
arrFieldStructContent[4] := 'iTestDirection';
arrFieldStructContent[5] := 'rTargetTestPressureInBarA';
arrFieldStructContent[6] := 'rTargetTestPressureInBarB';
arrFieldStructContent[7] := 'rCurrentTestPressureInBar';
arrFieldStructContent[8] := 'rTargetTestForceInKNA';
arrFieldStructContent[9] := 'rTargetTestForceInKNB';
arrFieldStructContent[10] := 'rCurrentTestForceInKN';
arrFieldStructContent[11] := 'rTestPressureAInBar';
arrFieldStructContent[12] := 'rTestPressureBInBar';
arrFieldStructContent[13] := 'rBreakawayPressureInBar';
arrFieldStructContent[14] := 'rBreakawayPressureAInBar';
arrFieldStructContent[15] := 'rBreakawayPressureBInBar';
arrFieldStructContent[16] := 'rReservoirPressureInBar';
arrFieldStructContent[17] := 'rTargetCounterPressureInBarA';
arrFieldStructContent[18] := 'rTargetCounterPressureInBarB';
arrFieldStructContent[19] := 'rCurrentCounterPressureInBar';
arrFieldStructContent[20] := 'rTargetCounterForceInKNA';
arrFieldStructContent[21] := 'rTargetCounterForceInKNB';
arrFieldStructContent[22] := 'rCurrentCounterForceInKN';
arrFieldStructContent[23] := 'lrPosition';
arrFieldStructContent[24] := 'lrPositionMin';
arrFieldStructContent[25] := 'lrPositionMax';
arrFieldStructContent[26] := 'lrCylStrokeLength';
arrFieldStructContent[27] := 'lrTemperature';
arrFieldStructContent[28] := 'lrCylPistonSurfaceA';
arrFieldStructContent[29] := 'lrCylPistonSurfaceB';
arrFieldStructContent[30] := 'lrNokLimit';
arrFieldStructContent[31] := 'lrCurrentNokDifference';
arrFieldStructContent[32] := 'lrCurrentNokLimitInPercent';
arrFieldStructContent[33] := 'lrTargetSpeedAInMmPerS';
arrFieldStructContent[34] := 'lrTargetSpeedBInMmPerS';
arrFieldStructContent[35] := 'lrCurrentSpeedInMmPerS';

// assign variable names to database content
arrFieldNames[0] := 'Zeitstempel';
arrFieldNames[1] := 'Timer';
arrFieldNames[2] := 'SollZyklen';
arrFieldNames[3] := 'AktiverZyklus';
arrFieldNames[4] := 'Prüfrichtung';
arrFieldNames[5] := 'TestdruckInBarA_Soll';
arrFieldNames[6] := 'TestdruckInBarB_Soll';
arrFieldNames[7] := 'TestdruckInBar_Ist';
arrFieldNames[8] := 'TestkraftInKNA_Soll';
arrFieldNames[9] := 'TestkraftInKNB_Soll';
arrFieldNames[10] := 'TestkraftInKN_Ist';
arrFieldNames[11] := 'TestDruckAInBar';
arrFieldNames[12] := 'TestDruckBInBar';
arrFieldNames[13] := 'LosbrechdruckInBar';
arrFieldNames[14] := 'LosbrechdruckAInBar';
arrFieldNames[15] := 'LosbrechdruckBInBar';
arrFieldNames[16] := 'DruckspeicherdruckInBar';
arrFieldNames[17] := 'GegenhaltezylinderdruckInBarA_Soll';
arrFieldNames[18] := 'GegenhaltezylinderdruckInBarB_Soll';
arrFieldNames[19] := 'GegenhaltezylinderdruckInBar_Ist';
arrFieldNames[20] := 'GegenhaltezylinderkraftInKNA_Soll';
arrFieldNames[21] := 'GegenhaltezylinderkraftInKNB_Soll';
arrFieldNames[22] := 'GegenhaltezylinderkraftInKN_Ist';
arrFieldNames[23] := 'Position';
arrFieldNames[24] := 'PositionMin';
arrFieldNames[25] := 'PositionMax';
arrFieldNames[26] := 'HublängeInMm';
arrFieldNames[27] := 'TemperaturInC';
arrFieldNames[28] := 'KolbenflächeA';
arrFieldNames[29] := 'KolbenflächeB';
arrFieldNames[30] := 'NOKDifferenzLimit';
arrFieldNames[31] := 'NOKDifferenz_Ist';
arrFieldNames[32] := 'NOKDifferenzInProzent_Ist';
arrFieldNames[33] := 'GeschwindigkeitAInMmProS_Soll';
arrFieldNames[34] := 'GeschwindigkeitBInMmProS_Soll';
arrFieldNames[35] := 'GeschwindigkeitInMmProS_Ist';

// Set
IF PrgVisu.fbVisuOPMode.P_EnduranceRunSelected THEN
  sTagName := 'Dauerlauf';
  liTargetCycles := PrgStation.stRecipeParams.stRecipeEnduranceRun.udiCycles;
  rTargetTestPressureInBarA := PrgStation.stRecipeParams.stRecipeEnduranceRun.rWorkPressureA;
  rTargetTestPressureInBarB := PrgStation.stRecipeParams.stRecipeEnduranceRun.rWorkPressureB;
  rTargetTestForceInKNA := PrgStation.stRecipeParams.stRecipeEnduranceRun.rWorkForceA;
  rTargetTestForceInKNB := PrgStation.stRecipeParams.stRecipeEnduranceRun.rWorkForceB;
  rTargetCounterPressureInBarA := PrgStation.stRecipeParams.stRecipeEnduranceRun.rLoadPressureA;
  rTargetCounterPressureInBarB := PrgStation.stRecipeParams.stRecipeEnduranceRun.rLoadPressureB;
  rTargetCounterForceInKNA := PrgStation.stRecipeParams.stRecipeEnduranceRun.rLoadForceA;
  rTargetCounterForceInKNB := PrgStation.stRecipeParams.stRecipeEnduranceRun.rLoadForceB;
  rTargetSpeedAInMmPerS := PrgStation.stRecipeParams.stRecipeEnduranceRun.rSpeedA;
  rTargetSpeedBInMmPerS := PrgStation.stRecipeParams.stRecipeEnduranceRun.rSpeedB;
  lrNokLimit := PrgStation.stRecipeParams.stRecipeEnduranceRun.stLT1_Params.rNokLimit;
ELSIF PrgVisu.fbVisuOPMode.P_BreakPressureDetSelected THEN
  sTagName := 'Losbrechdruck';
  liTargetCycles := PrgStation.stRecipeParams.stRecipeBreakPressure.uiVentCycles;
  rTargetTestPressureInBarA := 0.0;
  rTargetTestPressureInBarB := 0.0;
  rTargetTestForceInKNA := 0.0;
  rTargetTestForceInKNB := 0.0;
  rTargetCounterPressureInBarA := 0.0;
  rTargetCounterPressureInBarB := 0.0;
  rTargetCounterForceInKNA := 0.0;
  rTargetCounterForceInKNB := 0.0;
  rTargetSpeedAInMmPerS := PrgStation.stRecipeParams.stRecipeBreakPressure.rMinSpeedInMmPerS;
  rTargetSpeedBInMmPerS := PrgStation.stRecipeParams.stRecipeBreakPressure.rMinSpeedInMmPerS;
  lrNokLimit := PrgStation.stRecipeParams.stRecipeBreakPressure.rNokLimit;
ELSIF PrgVisu.fbVisuOPMode.P_LeakTest1Selected THEN
  sTagName := 'Dichtheitsprüfung1';
  liTargetCycles := PrgStation.stRecipeParams.stRecipeLeakTest1.uiVentCycles;
  rTargetTestPressureInBarA := 0.0;
  rTargetTestPressureInBarB := 0.0;
  rTargetTestForceInKNA := 0.0;
  rTargetTestForceInKNB := 0.0;
  rTargetCounterPressureInBarA := PrgStation.stRecipeParams.stRecipeLeakTest1.rLoadPressureA;
  rTargetCounterPressureInBarB := PrgStation.stRecipeParams.stRecipeLeakTest1.rLoadPressureB;
  rTargetCounterForceInKNA := PrgStation.stRecipeParams.stRecipeLeakTest1.rLoadForceA;
  rTargetCounterForceInKNB := PrgStation.stRecipeParams.stRecipeLeakTest1.rLoadForceB;
  rTargetSpeedAInMmPerS := 0.0;
  rTargetSpeedBInMmPerS := 0.0;
  lrNokLimit := PrgStation.stRecipeParams.stRecipeLeakTest1.rNokLimit;
ELSIF PrgVisu.fbVisuOPMode.P_LeakTest2Selected THEN
  sTagName := 'Dichtheitsprüfung2';
  liTargetCycles := PrgStation.stRecipeParams.stRecipeLeakTest2.uiVentCycles;
  rTargetTestPressureInBarA := PrgStation.stRecipeParams.stRecipeLeakTest2.rLoadPressureA;
  rTargetTestPressureInBarB := PrgStation.stRecipeParams.stRecipeLeakTest2.rLoadPressureB;
  rTargetTestForceInKNA := PrgStation.stRecipeParams.stRecipeLeakTest2.rLoadForceA;
  rTargetTestForceInKNB := PrgStation.stRecipeParams.stRecipeLeakTest2.rLoadForceB;
  rTargetCounterPressureInBarA := 0.0;
  rTargetCounterPressureInBarB := 0.0;
  rTargetCounterForceInKNA := 0.0;
  rTargetCounterForceInKNB := 0.0;
  rTargetSpeedAInMmPerS := 0.0;
  rTargetSpeedBInMmPerS := 0.0;
  lrNokLimit := PrgStation.stRecipeParams.stRecipeLeakTest2.rNokLimit;
END_IF

// Current Timestamp
sCurrentDateTime := CONCAT(TO_STRING(systemTime.wYear), '_');
sCurrentDateTime := CONCAT(sCurrentDateTime, TO_STRING(systemTime.wMonth));
sCurrentDateTime := CONCAT(sCurrentDateTime, '_');
sCurrentDateTime := CONCAT(sCurrentDateTime, TO_STRING(systemTime.wDay));
sCurrentDateTime := CONCAT(sCurrentDateTime, '_');
sCurrentDateTime := CONCAT(sCurrentDateTime, TO_STRING(systemTime.wHour));
sCurrentDateTime := CONCAT(sCurrentDateTime, '_');
sCurrentDateTime := CONCAT(sCurrentDateTime, TO_STRING(systemTime.wMinute));
sCurrentDateTime := CONCAT(sCurrentDateTime, '_');
sCurrentDateTime := CONCAT(sCurrentDateTime, TO_STRING(systemTime.wSecond));

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_020_DBNest1" Id="{aecf5f8e-87ac-46d9-ad92-8292f5baf49e}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[// Assign Nest1 values to database
sMeasurementName := PrgStation.sTestCyl1SNo;

stFieldValues.sTimeStamp := sCurrentDateTime;
stFieldValues.sTimer := PrgStation.fbTimerNest1.M_GetTimerET(FALSE, '');
stFieldValues.liTargetCycles := liTargetCycles;
stFieldValues.liActiveCycle := PrgStation.fbMainProcess.P_CurrentCycleNest1;
stFieldValues.iTestDirection := PrgStation.fbTestCyl1.P_ActiveDirection;
stFieldValues.rTargetTestPressureInBarA := rTargetTestPressureInBarA;
stFieldValues.rTargetTestPressureInBarB := rTargetTestPressureInBarB;
stFieldValues.rCurrentTestPressureInBar := PrgStation.rPressureConverted_TestCyl1;
stFieldValues.rTargetTestForceInKNA := rTargetTestForceInKNA;
stFieldValues.rTargetTestForceInKNB := rTargetTestForceInKNB;
stFieldValues.rCurrentTestForceInKN := PrgStation.fbTestCyl1.P_CurrentForceInKN;
stFieldValues.rTestPressureAInBar := PrgStation.rPressureConverted_TestCyl1_A;
stFieldValues.rTestPressureBInBar := PrgStation.rPressureConverted_TestCyl1_B;
stFieldValues.rBreakawayPressureInBar := PrgStation.rPressureConverted_LowPressure;
stFieldValues.rBreakawayPressureAInBar := PrgStation.rPressureConverted_TestCyl1_BreakPressure_A;
stFieldValues.rBreakawayPressureBInBar := PrgStation.rPressureConverted_TestCyl1_BreakPressure_B;
stFieldValues.rReservoirPressureInBar := PrgStation.rPressureConverted_TestCyl1_PressureReservoir;
stFieldValues.rTargetCounterPressureInBarA := rTargetCounterPressureInBarA;
stFieldValues.rTargetCounterPressureInBarB := rTargetCounterPressureInBarB;
stFieldValues.rCurrentCounterPressureInBar := PrgStation.rPressureConverted_CounterCyl1;
stFieldValues.rTargetCounterForceInKNA := rTargetCounterForceInKNA;
stFieldValues.rTargetCounterForceInKNB := rTargetCounterForceInKNB;
stFieldValues.rCurrentCounterForceInKN := PrgStation.fbCounterCyl1.P_CurrentForceInKN;
stFieldValues.lrPosition := PrgStation.fbTestCyl1.P_Position;
stFieldValues.lrPositionMin := PrgStation.fbTestCyl1.P_MinPosVal;
stFieldValues.lrPositionMax := PrgStation.fbTestCyl1.P_MaxPosVal;
stFieldValues.lrCylStrokeLength := PrgStation.fbTestCyl1.P_StrokeLength;
stFieldValues.lrTemperature := 0; // Programmieren????
stFieldValues.lrCylPistonSurfaceA := PrgStation.stRecipeParams.stRecipeCyl.lrPistonSurfaceA;
stFieldValues.lrCylPistonSurfaceB := PrgStation.stRecipeParams.stRecipeCyl.lrPistonSurfaceB;
stFieldValues.lrNokLimit := lrNokLimit;
stFieldValues.lrCurrentNokDifference := PrgStation.fbNest1.P_NokDifference;
stFieldValues.lrCurrentNokLimitInPercent := PrgStation.fbNest1.P_NokLimitInPercent;
stFieldValues.lrTargetSpeedAInMmPerS := rTargetSpeedAInMmPerS;
stFieldValues.lrTargetSpeedBInMmPerS := rTargetSpeedBInMmPerS;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_030_DBNest2" Id="{87633ed4-68f7-41de-bbb8-8a3d33418e3d}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[// Assign Nest2 values to database
sMeasurementName := PrgStation.sTestCyl2SNo;

stFieldValues.sTimeStamp := sCurrentDateTime;
stFieldValues.sTimer := PrgStation.fbTimerNest2.M_GetTimerET(FALSE, '');
stFieldValues.liTargetCycles := liTargetCycles;
stFieldValues.liActiveCycle := PrgStation.fbMainProcess.P_CurrentCycleNest2;
stFieldValues.iTestDirection := PrgStation.fbTestCyl2.P_ActiveDirection;
stFieldValues.rTargetTestPressureInBarA := rTargetTestPressureInBarA;
stFieldValues.rTargetTestPressureInBarB := rTargetTestPressureInBarB;
stFieldValues.rCurrentTestPressureInBar := PrgStation.rPressureConverted_TestCyl2;
stFieldValues.rTargetTestForceInKNA := rTargetTestForceInKNA;
stFieldValues.rTargetTestForceInKNB := rTargetTestForceInKNB;
stFieldValues.rCurrentTestForceInKN := PrgStation.fbTestCyl2.P_CurrentForceInKN;
stFieldValues.rTestPressureAInBar := PrgStation.rPressureConverted_TestCyl2_A;
stFieldValues.rTestPressureBInBar := PrgStation.rPressureConverted_TestCyl2_B;
stFieldValues.rBreakawayPressureInBar := 0.0;
stFieldValues.rBreakawayPressureAInBar := 0.0;
stFieldValues.rBreakawayPressureBInBar := 0.0;
stFieldValues.rReservoirPressureInBar := 0.0;
stFieldValues.rTargetCounterPressureInBarA := rTargetCounterPressureInBarA;
stFieldValues.rTargetCounterPressureInBarB := rTargetCounterPressureInBarB;
stFieldValues.rCurrentCounterPressureInBar := PrgStation.rPressureConverted_CounterCyl2;
stFieldValues.rTargetCounterForceInKNA := rTargetCounterForceInKNA;
stFieldValues.rTargetCounterForceInKNB := rTargetCounterForceInKNB;
stFieldValues.rCurrentCounterForceInKN := PrgStation.fbCounterCyl2.P_CurrentForceInKN;
stFieldValues.lrPosition := PrgStation.fbTestCyl2.P_Position;
stFieldValues.lrPositionMin := PrgStation.fbTestCyl2.P_MinPosVal;
stFieldValues.lrPositionMax := PrgStation.fbTestCyl2.P_MaxPosVal;
stFieldValues.lrCylStrokeLength := PrgStation.fbTestCyl2.P_StrokeLength;
stFieldValues.lrTemperature := 0; // Programmieren????
stFieldValues.lrCylPistonSurfaceA := PrgStation.stRecipeParams.stRecipeCyl.lrPistonSurfaceA;
stFieldValues.lrCylPistonSurfaceB := PrgStation.stRecipeParams.stRecipeCyl.lrPistonSurfaceB;
stFieldValues.lrNokLimit := lrNokLimit;
stFieldValues.lrCurrentNokDifference := PrgStation.fbNest2.P_NokDifference;
stFieldValues.lrCurrentNokLimitInPercent := PrgStation.fbNest2.P_NokLimitInPercent;
stFieldValues.lrTargetSpeedAInMmPerS := rTargetSpeedAInMmPerS;
stFieldValues.lrTargetSpeedBInMmPerS := rTargetSpeedBInMmPerS;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_040_DBNest3" Id="{0f20151f-7425-43ca-9234-a52f3cc0246d}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[// Assign Nest3 values to database
sMeasurementName := PrgStation.sTestCyl3SNo;

stFieldValues.sTimeStamp := sCurrentDateTime;
stFieldValues.sTimer := PrgStation.fbTimerNest3.M_GetTimerET(FALSE, '');
stFieldValues.liTargetCycles := liTargetCycles;
stFieldValues.liActiveCycle := PrgStation.fbMainProcess.P_CurrentCycleNest3;
stFieldValues.iTestDirection := PrgStation.fbTestCyl3.P_ActiveDirection;
stFieldValues.rTargetTestPressureInBarA := rTargetTestPressureInBarA;
stFieldValues.rTargetTestPressureInBarB := rTargetTestPressureInBarB;
stFieldValues.rCurrentTestPressureInBar := PrgStation.rPressureConverted_TestCyl3;
stFieldValues.rTargetTestForceInKNA := rTargetTestForceInKNA;
stFieldValues.rTargetTestForceInKNB := rTargetTestForceInKNB;
stFieldValues.rCurrentTestForceInKN := PrgStation.fbTestCyl3.P_CurrentForceInKN;
stFieldValues.rTestPressureAInBar := PrgStation.rPressureConverted_TestCyl3_A;
stFieldValues.rTestPressureBInBar := PrgStation.rPressureConverted_TestCyl3_B;
stFieldValues.rBreakawayPressureInBar := 0.0;
stFieldValues.rBreakawayPressureAInBar := 0.0;
stFieldValues.rBreakawayPressureBInBar := 0.0;
stFieldValues.rReservoirPressureInBar := 0.0;
stFieldValues.rTargetCounterPressureInBarA := rTargetCounterPressureInBarA;
stFieldValues.rTargetCounterPressureInBarB := rTargetCounterPressureInBarB;
stFieldValues.rCurrentCounterPressureInBar := PrgStation.rPressureConverted_CounterCyl3;
stFieldValues.rTargetCounterForceInKNA := rTargetCounterForceInKNA;
stFieldValues.rTargetCounterForceInKNB := rTargetCounterForceInKNB;
stFieldValues.rCurrentCounterForceInKN := PrgStation.fbCounterCyl3.P_CurrentForceInKN;
stFieldValues.lrPosition := PrgStation.fbTestCyl3.P_Position;
stFieldValues.lrPositionMin := PrgStation.fbTestCyl3.P_MinPosVal;
stFieldValues.lrPositionMax := PrgStation.fbTestCyl3.P_MaxPosVal;
stFieldValues.lrCylStrokeLength := PrgStation.fbTestCyl3.P_StrokeLength;
stFieldValues.lrTemperature := 0; // Programmieren????
stFieldValues.lrCylPistonSurfaceA := PrgStation.stRecipeParams.stRecipeCyl.lrPistonSurfaceA;
stFieldValues.lrCylPistonSurfaceB := PrgStation.stRecipeParams.stRecipeCyl.lrPistonSurfaceB;
stFieldValues.lrNokLimit := lrNokLimit;
stFieldValues.lrCurrentNokDifference := PrgStation.fbNest3.P_NokDifference;
stFieldValues.lrCurrentNokLimitInPercent := PrgStation.fbNest3.P_NokLimitInPercent;
stFieldValues.lrTargetSpeedAInMmPerS := rTargetSpeedAInMmPerS;
stFieldValues.lrTargetSpeedBInMmPerS := rTargetSpeedBInMmPerS;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_050_DBNest4" Id="{0bb378cd-7527-4176-9ede-3c340ad5e3ab}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[// Assign Nest3 values to database
sMeasurementName := PrgStation.sTestCyl4SNo;

stFieldValues.sTimeStamp := sCurrentDateTime;
stFieldValues.sTimer := PrgStation.fbTimerNest4.M_GetTimerET(FALSE, '');
stFieldValues.liTargetCycles := liTargetCycles;
stFieldValues.liActiveCycle := PrgStation.fbMainProcess.P_CurrentCycleNest4;
stFieldValues.iTestDirection := PrgStation.fbTestCyl4.P_ActiveDirection;
stFieldValues.rTargetTestPressureInBarA := rTargetTestPressureInBarA;
stFieldValues.rTargetTestPressureInBarB := rTargetTestPressureInBarB;
stFieldValues.rCurrentTestPressureInBar := PrgStation.rPressureConverted_TestCyl4;
stFieldValues.rTargetTestForceInKNA := rTargetTestForceInKNA;
stFieldValues.rTargetTestForceInKNB := rTargetTestForceInKNB;
stFieldValues.rCurrentTestForceInKN := PrgStation.fbTestCyl4.P_CurrentForceInKN;
stFieldValues.rTestPressureAInBar := PrgStation.rPressureConverted_TestCyl4_A;
stFieldValues.rTestPressureBInBar := PrgStation.rPressureConverted_TestCyl4_B;
stFieldValues.rBreakawayPressureInBar := 0.0;
stFieldValues.rBreakawayPressureAInBar := 0.0;
stFieldValues.rBreakawayPressureBInBar := 0.0;
stFieldValues.rReservoirPressureInBar := 0.0;
stFieldValues.rTargetCounterPressureInBarA := rTargetCounterPressureInBarA;
stFieldValues.rTargetCounterPressureInBarB := rTargetCounterPressureInBarB;
stFieldValues.rCurrentCounterPressureInBar := PrgStation.rPressureConverted_CounterCyl4;
stFieldValues.rTargetCounterForceInKNA := rTargetCounterForceInKNA;
stFieldValues.rTargetCounterForceInKNB := rTargetCounterForceInKNB;
stFieldValues.rCurrentCounterForceInKN := PrgStation.fbCounterCyl4.P_CurrentForceInKN;
stFieldValues.lrPosition := PrgStation.fbTestCyl4.P_Position;
stFieldValues.lrPositionMin := PrgStation.fbTestCyl4.P_MinPosVal;
stFieldValues.lrPositionMax := PrgStation.fbTestCyl4.P_MaxPosVal;
stFieldValues.lrCylStrokeLength := PrgStation.fbTestCyl4.P_StrokeLength;
stFieldValues.lrTemperature := 0; // Programmieren????
stFieldValues.lrCylPistonSurfaceA := PrgStation.stRecipeParams.stRecipeCyl.lrPistonSurfaceA;
stFieldValues.lrCylPistonSurfaceB := PrgStation.stRecipeParams.stRecipeCyl.lrPistonSurfaceB;
stFieldValues.lrNokLimit := lrNokLimit;
stFieldValues.lrCurrentNokDifference := PrgStation.fbNest4.P_NokDifference;
stFieldValues.lrCurrentNokLimitInPercent := PrgStation.fbNest4.P_NokLimitInPercent;
stFieldValues.lrTargetSpeedAInMmPerS := rTargetSpeedAInMmPerS;
stFieldValues.lrTargetSpeedBInMmPerS := rTargetSpeedBInMmPerS;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_100_SaveToDB" Id="{6d3721e8-c1ca-49a2-96eb-a764e4045a04}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[(* Timer *)
// Abort condition
tonFailedSavelimitTimer(IN:= NOT tonFailedSavelimitTimer.Q, PT:= tFailedSaveLimitTime);
IF tonFailedSavelimitTimer.Q THEN
  uiFailedSaveCounter := 0;
ELSE
  IF uiFailedSaveCounter >= uiAllowedSaveFail THEN
    bRecord := FALSE;
    ;// Error and abort
	END_IF
END_IF

// Save to database
tonSwitchTimer();
tonInterval();
IF bRecord THEN
  // First xxmin save interval = 0.5s and then 2min
  tonSwitchTimer(IN:= TRUE, PT:= tSwitchTime);
  IF tonSwitchTimer.Q THEN
    uiAllowedSaveFail := 2;
    tInterval := T#2M;
  ELSE
    uiAllowedSaveFail := 10;
    tInterval := T#500MS;
  END_IF
  // Save interval
  tonInterval(IN:= TRUE, PT:= tInterval);
  IF tonInterval.Q AND NOT bSaveBusy THEN
    bSaveTrigger := TRUE;
  END_IF
ELSE
  // Reset
  tonSwitchTimer.IN := FALSE;
  tonInterval.IN := FALSE;
  //iSaveSeq := 0;
END_IF
// Save action
IF bSaveTrigger THEN
  bSaveBusy := TRUE;
  CASE iSaveSeq OF
    0:
      IF fbInfluxDB.M_SetReady() THEN
          iSeqCounter := iSeqCounter + 1;
          iSaveSeq := iSeqCounter;
      END_IF
    1:
      A_020_DBNest1();
      IF PrgStation.fbNest1.bEnable THEN
        IF TRUE
        AND fbInfluxDB.M_WriteStruct(sBucketName:= sBucketName,
                                    sMeasurementName:= sMeasurementName,
                                    sTagName:= sTagName,
                                    stFieldValues:= stFieldValues,
                                    bResult=> bSaveSuccess) 
        THEN
          IF bSaveSuccess THEN
            bSaveSuccess := FALSE;
          ELSE
            // Warningmessage/-log, but no abort (Abort with tonFailedSavelimitTimer)
            // ...
            uiFailedSaveCounter := uiFailedSaveCounter + 1;
					END_IF
          iSaveSeq := 0;
        END_IF
      ELSE
        iSaveSeq := 0;
      END_IF
    2:
      A_030_DBNest2();
      IF PrgStation.fbNest2.bEnable THEN
        IF TRUE
        AND fbInfluxDB.M_WriteStruct(sBucketName:= sBucketName,
                                    sMeasurementName:= sMeasurementName,
                                    sTagName:= sTagName,
                                    stFieldValues:= stFieldValues,
                                    bResult=> bSaveSuccess) 
        THEN
          IF bSaveSuccess THEN
            bSaveSuccess := FALSE;
          ELSE
            // Warningmessage/-log, but no abort (Abort with tonFailedSavelimitTimer)
            // ...
            uiFailedSaveCounter := uiFailedSaveCounter + 1;
					END_IF
          iSaveSeq := 0;
        END_IF
      ELSE
        iSaveSeq := 0;
      END_IF
    3:
      A_040_DBNest3();
      IF PrgStation.fbNest3.bEnable THEN
        IF TRUE
        AND fbInfluxDB.M_WriteStruct(sBucketName:= sBucketName,
                                    sMeasurementName:= sMeasurementName,
                                    sTagName:= sTagName,
                                    stFieldValues:= stFieldValues,
                                    bResult=> bSaveSuccess) 
        THEN
          IF bSaveSuccess THEN
            bSaveSuccess := FALSE;
          ELSE
            // Warningmessage/-log, but no abort (Abort with tonFailedSavelimitTimer)
            // ...
            uiFailedSaveCounter := uiFailedSaveCounter + 1;
					END_IF
          iSaveSeq := 0;
        END_IF
      ELSE
        iSaveSeq := 0;
      END_IF
    4:
      A_050_DBNest4();
      IF PrgStation.fbNest4.bEnable THEN
        IF TRUE
        AND fbInfluxDB.M_WriteStruct(sBucketName:= sBucketName,
                                    sMeasurementName:= sMeasurementName,
                                    sTagName:= sTagName,
                                    stFieldValues:= stFieldValues,
                                    bResult=> bSaveSuccess) 
        THEN
          IF bSaveSuccess THEN
            bSaveSuccess := FALSE;
          ELSE
            // Warningmessage/-log, but no abort (Abort with tonFailedSavelimitTimer)
            // ...
            uiFailedSaveCounter := uiFailedSaveCounter + 1;
					END_IF
          iSaveSeq := 0;
        END_IF
      END_IF
      iSaveSeq := 0;
      iSeqCounter := 0;
      bSaveTrigger := FALSE;
      tonInterval.IN := FALSE;
      bSaveBusy := FALSE;
  END_CASE
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_110_TotalMeasurements" Id="{4faf74ff-8768-4a94-8d01-3ea73becc59a}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[IF bGetTotalMeasurements THEN
  CASE uiTotalMeasurementsSeq OF
    0:
      IF fbInfluxDB.M_SetReady() THEN
          uiTotalMeasurementsSeq := 1;
      END_IF
    1:
      IF fbInfluxDB.M_GetTotalMeasurements(sBucketName:= sBucketName, 
                                           bResult=> bGetTotalMeasurementsProcessSuccess, 
                                           uiResult=> uiTotalMeasurements) 
      THEN
        IF bGetTotalMeasurementsProcessSuccess THEN
          bGetTotalMeasurementsProcessSuccess := FALSE;
        ELSE
          // Warningmessage/-log, but no abort (Abort with tonFailedSavelimitTimer)
          // ...
				END_IF
        bGetTotalMeasurements := FALSE;
        uiTotalMeasurementsSeq := 0;
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_120_MeasurementExistCheck" Id="{cab01917-2545-4f2e-ac9b-9095c7fa523d}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[// Init

// General
IF bGetMeasurementExist THEN
  CASE uiMeasurementExistSeq OF
    0:
      IF fbInfluxDB.M_SetReady() THEN
          uiMeasurementExistSeq := 1;
      END_IF
    1:
      IF fbInfluxDB.M_MeasurementExistCheck(sBucketName:= sBucketName,
                                            sMeasurementName:= sMeasurementNameFromCfg, 
                                            bResult=> bMeasurementExist) 
      THEN
        bGetMeasurementExist := FALSE;
        uiMeasurementExistSeq := 0;
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_130_TagExistCheck" Id="{153431f8-bec0-4415-b737-1c04ba743e50}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[// Init
CASE uiTagNameIDFromCfg OF
  1:
    sTagNameFromCfg := 'Dauerlauf';
  2:
    sTagNameFromCfg := 'Dichtheitsprüfung1';
  3:
    sTagNameFromCfg := 'Dichtheitsprüfung2';
  4:
    sTagNameFromCfg := 'Losbrechdruck';
  5:
    sTagNameFromCfg := '';
END_CASE

// General
IF bGetTagExist THEN
  CASE uiTagExistSeq OF
    0:
      IF fbInfluxDB.M_SetReady() THEN
          uiTagExistSeq := 1;
      END_IF
    1:
      IF fbInfluxDB.M_TagExistCheck(sBucketName:= sBucketName,
                                    sMeasurementName:= sMeasurementNameFromCfg,
                                    sTagName:= sTagNameFromCfg, 
                                    bResult=> bTagExist) 
      THEN
        bGetTagExist := FALSE;
        uiTagExistSeq := 0;
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_140_DeleteMeasurement" Id="{3c388993-6215-456b-bc88-0f210088f54f}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[// Init

// General
IF bDeleteMeasurement THEN
  CASE uiDeleteMeasurementSeq OF
    0:
      IF fbInfluxDB.M_SetReady() THEN
        uiDeleteMeasurementSeq := 1;
      END_IF
    1:
      IF fbInfluxDB.M_DeleteMeasurement(sBucketName:= sBucketName,
                                        sMeasurementName:= sMeasurementNameFromCfg, 
                                        bResult=> bDeleteMeasurementResult) 
      THEN
        bDeleteMeasurement := FALSE;
        uiDeleteMeasurementSeq := 0;
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_150_DeleteTag" Id="{462df232-a3f5-4ea6-9bb6-ff0989681535}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[// Init
CASE uiTagNameIDFromCfg OF
  1:
    sTagNameFromCfg := 'Dauerlauf';
  2:
    sTagNameFromCfg := 'Dichtheitsprüfung1';
  3:
    sTagNameFromCfg := 'Dichtheitsprüfung2';
  4:
    sTagNameFromCfg := 'Losbrechdruck';
  5:
    sTagNameFromCfg := '';
END_CASE

// General
IF bDeleteTag THEN
  CASE uiDeleteTagSeq OF
    0:
      IF fbInfluxDB.M_SetReady() THEN
        uiDeleteTagSeq := 1;
      END_IF
    1:
      IF fbInfluxDB.M_DeleteTag(sBucketName:= sBucketName,
                                        sMeasurementName:= sMeasurementNameFromCfg, 
                                        sTagName:= sTagNameFromCfg,
                                        bResult=> bDeleteTagResult) 
      THEN
        bDeleteTag := FALSE;
        uiDeleteTagSeq := 0;
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_160_DeleteTagContentBlock" Id="{7f0cc6ea-5c30-4032-83d1-f47f2324604a}" FolderPath="InfluxDB\">
      <Implementation>
        <ST><![CDATA[// Init
CASE uiTagNameIDFromCfg OF
  1:
    sTagNameFromCfg := 'Dauerlauf';
  2:
    sTagNameFromCfg := 'Dichtheitsprüfung1';
  3:
    sTagNameFromCfg := 'Dichtheitsprüfung2';
  4:
    sTagNameFromCfg := 'Losbrechdruck';
  5:
    sTagNameFromCfg := '';
END_CASE

// General
IF bDeleteTagContentBlock THEN
  CASE uiDeleteTagContentBlockSeq OF
    0:
      IF fbInfluxDB.M_SetReady() THEN
        uiDeleteTagContentBlockSeq := 1;
      END_IF
    1:
      IF fbInfluxDB.M_DeleteTagContentBlock(sBucketName:= sBucketName,
                                            sMeasurementName:= sMeasurementNameFromCfg, 
                                            sTagName:= sTagNameFromCfg,
                                            dtFrom:= dtFromFromCfg,
                                            dtTo:= dtToFromCfg,
                                            bResult=> bDeleteTagContentBlockResult) 
      THEN
        bDeleteTagContentBlock := FALSE;
        uiDeleteTagContentBlockSeq := 0;
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="PrgMeasure">
      <LineId Id="1074" Count="0" />
      <LineId Id="2318" Count="0" />
      <LineId Id="1288" Count="0" />
      <LineId Id="1879" Count="0" />
      <LineId Id="2384" Count="0" />
      <LineId Id="2393" Count="3" />
      <LineId Id="2526" Count="0" />
      <LineId Id="2427" Count="0" />
      <LineId Id="2092" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_000_FBs">
      <LineId Id="2" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_010_DBInit">
      <LineId Id="19" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="89" Count="28" />
      <LineId Id="166" Count="0" />
      <LineId Id="118" Count="4" />
      <LineId Id="165" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="132" Count="29" />
      <LineId Id="167" Count="0" />
      <LineId Id="162" Count="2" />
      <LineId Id="131" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="223" Count="0" />
      <LineId Id="173" Count="12" />
      <LineId Id="224" Count="0" />
      <LineId Id="186" Count="12" />
      <LineId Id="225" Count="0" />
      <LineId Id="199" Count="12" />
      <LineId Id="226" Count="0" />
      <LineId Id="212" Count="10" />
      <LineId Id="170" Count="0" />
      <LineId Id="67" Count="10" />
      <LineId Id="80" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_020_DBNest1">
      <LineId Id="1" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="2" Count="29" />
      <LineId Id="59" Count="0" />
      <LineId Id="32" Count="3" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_030_DBNest2">
      <LineId Id="2" Count="36" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_040_DBNest3">
      <LineId Id="2" Count="36" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_050_DBNest4">
      <LineId Id="2" Count="36" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_100_SaveToDB">
      <LineId Id="2" Count="33" />
      <LineId Id="138" Count="0" />
      <LineId Id="36" Count="101" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_110_TotalMeasurements">
      <LineId Id="1" Count="1" />
      <LineId Id="4" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="6" Count="2" />
      <LineId Id="14" Count="7" />
      <LineId Id="23" Count="1" />
      <LineId Id="12" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_120_MeasurementExistCheck">
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="2" Count="7" />
      <LineId Id="23" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="4" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_130_TagExistCheck">
      <LineId Id="2" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="23" Count="8" />
      <LineId Id="22" Count="0" />
      <LineId Id="3" Count="10" />
      <LineId Id="33" Count="0" />
      <LineId Id="14" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_140_DeleteMeasurement">
      <LineId Id="14" Count="6" />
      <LineId Id="42" Count="0" />
      <LineId Id="22" Count="3" />
      <LineId Id="27" Count="3" />
      <LineId Id="43" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_150_DeleteTag">
      <LineId Id="2" Count="0" />
      <LineId Id="21" Count="10" />
      <LineId Id="3" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="4" Count="9" />
      <LineId Id="20" Count="0" />
      <LineId Id="14" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PrgMeasure.A_160_DeleteTagContentBlock">
      <LineId Id="2" Count="24" />
      <LineId Id="33" Count="1" />
      <LineId Id="27" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>